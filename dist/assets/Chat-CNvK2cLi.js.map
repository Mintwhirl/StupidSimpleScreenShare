{"version":3,"file":"Chat-CNvK2cLi.js","sources":["../../src/hooks/useChat.js","../../src/components/Chat.jsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useApi } from './useApi';\n\nexport function useChat(roomId, role, sender, secret = null) {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessageTime, setLastMessageTime] = useState(0);\n\n  const { sendChatMessage: apiSendMessage, getChatMessages: apiGetMessages } = useApi();\n  const pollingIntervalRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n\n  // Poll for new messages\n  const pollMessages = useCallback(async () => {\n    if (!roomId || !isConnected) return;\n\n    try {\n      const data = await apiGetMessages(roomId, lastMessageTime);\n\n      if (data.messages && data.messages.length > 0) {\n        setMessages((prevMessages) => {\n          // Filter out duplicates and merge with existing messages\n          const existingIds = new Set(prevMessages.map((msg) => msg.id));\n          const newMessages = data.messages.filter((msg) => !existingIds.has(msg.id));\n\n          if (newMessages.length > 0) {\n            // Update last message time\n            const latestTime = Math.max(...newMessages.map((msg) => msg.timestamp));\n            setLastMessageTime(latestTime);\n\n            return [...prevMessages, ...newMessages].sort((a, b) => a.timestamp - b.timestamp);\n          }\n\n          return prevMessages;\n        });\n      }\n    } catch (err) {\n      console.error('Error polling messages:', err);\n      setError('Failed to fetch messages');\n      setIsConnected(false);\n\n      // Attempt to reconnect\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n\n      reconnectTimeoutRef.current = setTimeout(() => {\n        setIsConnected(true);\n        setError(null);\n      }, 5000);\n    }\n  }, [roomId, lastMessageTime, isConnected, apiGetMessages]);\n\n  // Start polling for messages\n  const startPolling = useCallback(() => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n    }\n\n    pollingIntervalRef.current = setInterval(pollMessages, 2000); // Poll every 2 seconds\n  }, [pollMessages]);\n\n  // Stop polling for messages\n  const stopPolling = useCallback(() => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n  }, []);\n\n  // Initialize chat connection\n  useEffect(() => {\n    if (roomId && sender) {\n      setIsConnected(true);\n      setError(null);\n      setMessages([]);\n      setLastMessageTime(0);\n      startPolling();\n    } else {\n      setIsConnected(false);\n      stopPolling();\n    }\n\n    return () => {\n      stopPolling();\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [roomId, sender, startPolling, stopPolling]);\n\n  // Send a message\n  const sendMessage = useCallback(\n    async (message, messageSender = sender) => {\n      if (!roomId || !messageSender || !message.trim()) {\n        throw new Error('Room ID, sender, and message are required');\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        const data = await apiSendMessage(roomId, message, messageSender, secret);\n\n        if (data.ok) {\n          // Add the sent message to the local state immediately\n          const newMessage = {\n            id: data.message.id,\n            sender: messageSender,\n            message: message,\n            timestamp: data.message.timestamp,\n          };\n\n          setMessages((prevMessages) => [...prevMessages, newMessage].sort((a, b) => a.timestamp - b.timestamp));\n          setLastMessageTime(data.message.timestamp);\n\n          return data.message;\n        } else {\n          throw new Error('Failed to send message');\n        }\n      } catch (err) {\n        console.error('Error sending message:', err);\n        setError(`Failed to send message: ${err.message}`);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [roomId, sender, apiSendMessage]\n  );\n\n  // Load initial messages\n  const loadInitialMessages = useCallback(async () => {\n    if (!roomId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const data = await apiGetMessages(roomId, 0);\n\n      if (data.messages) {\n        setMessages(data.messages.sort((a, b) => a.timestamp - b.timestamp));\n\n        if (data.messages.length > 0) {\n          const latestTime = Math.max(...data.messages.map((msg) => msg.timestamp));\n          setLastMessageTime(latestTime);\n        }\n      }\n    } catch (err) {\n      console.error('Error loading initial messages:', err);\n      setError('Failed to load messages');\n    } finally {\n      setLoading(false);\n    }\n  }, [roomId, apiGetMessages]);\n\n  // Load initial messages when room changes\n  useEffect(() => {\n    if (roomId) {\n      loadInitialMessages();\n    }\n  }, [roomId, loadInitialMessages]);\n\n  // Clear messages\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setLastMessageTime(0);\n    setError(null);\n  }, []);\n\n  // Get message count\n  const getMessageCount = useCallback(() => {\n    return messages.length;\n  }, [messages]);\n\n  // Get messages by sender\n  const getMessagesBySender = useCallback(\n    (senderName) => {\n      return messages.filter((msg) => msg.sender === senderName);\n    },\n    [messages]\n  );\n\n  // Get latest message\n  const getLatestMessage = useCallback(() => {\n    return messages.length > 0 ? messages[messages.length - 1] : null;\n  }, [messages]);\n\n  // Check if sender has sent messages\n  const hasSenderSentMessages = useCallback(\n    (senderName) => {\n      return messages.some((msg) => msg.sender === senderName);\n    },\n    [messages]\n  );\n\n  // Get unique senders\n  const getUniqueSenders = useCallback(() => {\n    const senders = new Set(messages.map((msg) => msg.sender));\n    return Array.from(senders);\n  }, [messages]);\n\n  // Format message for display\n  const formatMessage = useCallback(\n    (message) => {\n      return {\n        ...message,\n        formattedTime: new Date(message.timestamp).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n        }),\n        formattedDate: new Date(message.timestamp).toLocaleDateString(),\n        isFromCurrentUser: message.sender === sender,\n      };\n    },\n    [sender]\n  );\n\n  // Get formatted messages\n  const getFormattedMessages = useCallback(() => {\n    return messages.map(formatMessage);\n  }, [messages, formatMessage]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopPolling();\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [stopPolling]);\n\n  return {\n    // State\n    messages,\n    loading,\n    error,\n    isConnected,\n    lastMessageTime,\n\n    // Actions\n    sendMessage,\n    clearMessages,\n    loadInitialMessages,\n\n    // Getters\n    getMessageCount,\n    getMessagesBySender,\n    getLatestMessage,\n    hasSenderSentMessages,\n    getUniqueSenders,\n    getFormattedMessages,\n  };\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { useChat } from '../hooks/useChat';\n\nfunction Chat({ roomId, role, viewerId, senderSecret }) {\n  const [message, setMessage] = useState('');\n  const [sender, setSender] = useState(viewerId || role);\n  const [isTyping, setIsTyping] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  const { messages, sendMessage, loading, error, isConnected } = useChat(roomId, role, sender, senderSecret);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Update sender when viewerId changes\n  useEffect(() => {\n    if (viewerId) {\n      setSender(viewerId);\n    }\n  }, [viewerId]);\n\n  // Handle typing indicator\n  const handleTyping = () => {\n    setIsTyping(true);\n\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    typingTimeoutRef.current = setTimeout(() => {\n      setIsTyping(false);\n    }, 1000);\n  };\n\n  // Handle emoji selection\n  const handleEmojiSelect = (emoji) => {\n    setMessage((prev) => prev + emoji);\n    setShowEmojiPicker(false);\n  };\n\n  // Handle sending message\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n\n    if (!message.trim() || !sender.trim()) {\n      return;\n    }\n\n    try {\n      await sendMessage(message.trim(), sender.trim());\n      setMessage('');\n    } catch (err) {\n      console.error('Error sending message:', err);\n    }\n  };\n\n  // Handle key press\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage(e);\n    }\n  };\n\n  // Format timestamp\n  const formatTime = (timestamp) => {\n    return new Date(timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // Get message sender display name\n  const getSenderDisplayName = (msgSender) => {\n    if (msgSender === 'host') {\n      return '🖥️ Host';\n    }\n    if (msgSender.startsWith('viewer_')) {\n      return `👀 ${msgSender}`;\n    }\n    return `👤 ${msgSender}`;\n  };\n\n  return (\n    <div className='flex flex-col h-full bg-white'>\n      {/* Chat Header */}\n      <div className='flex-shrink-0 bg-blue-600 text-white p-4'>\n        <div className='flex items-center justify-between'>\n          <h3 className='text-lg font-semibold'>💬 Chat</h3>\n          <div className='flex items-center space-x-2'>\n            <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`}></div>\n            <span className='text-sm'>{isConnected ? 'Connected' : 'Disconnected'}</span>\n          </div>\n        </div>\n        <p className='text-blue-100 text-sm mt-1'>Room: {roomId}</p>\n      </div>\n\n      {/* Messages Area */}\n      <div className='flex-1 overflow-y-auto p-4 space-y-3'>\n        {loading && messages.length === 0 && (\n          <div className='text-center text-gray-500 py-4'>\n            <div className='animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2'></div>\n            Loading messages...\n          </div>\n        )}\n\n        {error && (\n          <div className='bg-red-50 border border-red-200 rounded-lg p-3'>\n            <div className='text-red-600 text-sm'>⚠️ {error}</div>\n          </div>\n        )}\n\n        {messages.length === 0 && !loading && (\n          <div className='text-center text-gray-500 py-8'>\n            <div className='text-4xl mb-2'>💬</div>\n            <p>No messages yet</p>\n            <p className='text-sm'>Start the conversation!</p>\n          </div>\n        )}\n\n        {messages.map((msg) => (\n          <div key={msg.id} className={`flex ${msg.sender === sender ? 'justify-end' : 'justify-start'}`}>\n            <div\n              className={`max-w-xs lg:max-w-md px-3 py-2 rounded-lg ${\n                msg.sender === sender ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-900'\n              }`}\n            >\n              {msg.sender !== sender && (\n                <div className='text-xs font-medium text-gray-600 mb-1'>{getSenderDisplayName(msg.sender)}</div>\n              )}\n              <div className='text-sm whitespace-pre-wrap break-words'>{msg.message}</div>\n              <div className={`text-xs mt-1 ${msg.sender === sender ? 'text-blue-100' : 'text-gray-500'}`}>\n                {formatTime(msg.timestamp)}\n              </div>\n            </div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Message Input */}\n      <div className='flex-shrink-0 border-t bg-gray-50 p-4'>\n        <form onSubmit={handleSendMessage} className='space-y-3'>\n          {/* Sender Name Input */}\n          <div>\n            <input\n              type='text'\n              value={sender}\n              onChange={(e) => setSender(e.target.value)}\n              placeholder='Your name'\n              className='w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'\n              maxLength={50}\n            />\n          </div>\n\n          {/* Message Input */}\n          <div className='flex space-x-2'>\n            <div className='flex-1 relative'>\n              <textarea\n                value={message}\n                onChange={(e) => {\n                  setMessage(e.target.value);\n                  handleTyping();\n                }}\n                onKeyPress={handleKeyPress}\n                placeholder='Type your message... (Enter to send, Shift+Enter for new line)'\n                className='w-full px-3 py-2 pr-10 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none'\n                rows={2}\n                maxLength={500}\n              />\n              <button\n                type='button'\n                onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n                className='absolute right-2 top-2 text-gray-400 hover:text-gray-600'\n              >\n                😊\n              </button>\n            </div>\n            <button\n              type='submit'\n              disabled={!message.trim() || !sender.trim() || loading}\n              className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${\n                !message.trim() || !sender.trim() || loading\n                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  : 'bg-blue-600 text-white hover:bg-blue-700'\n              }`}\n            >\n              {loading ? <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white'></div> : 'Send'}\n            </button>\n          </div>\n\n          {/* Emoji Picker */}\n          {showEmojiPicker && (\n            <div className='absolute bottom-16 left-4 bg-white border border-gray-300 rounded-lg shadow-lg p-2 max-h-32 overflow-y-auto'>\n              <div className='grid grid-cols-8 gap-1'>\n                {['😀', '😂', '😍', '🤔', '👍', '👎', '❤️', '🔥', '💯', '🎉', '🚀', '⭐', '💡', '🎯', '🔥', '💪'].map(\n                  (emoji) => (\n                    <button\n                      key={emoji}\n                      type='button'\n                      onClick={() => handleEmojiSelect(emoji)}\n                      className='p-1 hover:bg-gray-100 rounded text-lg'\n                    >\n                      {emoji}\n                    </button>\n                  )\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Typing Indicator */}\n          {isTyping && <div className='text-xs text-gray-500 italic'>{sender} is typing...</div>}\n\n          {/* Character Count */}\n          <div className='flex justify-between text-xs text-gray-500'>\n            <span>{message.length}/500 characters</span>\n            <span>Press Enter to send, Shift+Enter for new line</span>\n          </div>\n        </form>\n      </div>\n\n      {/* Connection Status */}\n      {!isConnected && (\n        <div className='flex-shrink-0 bg-yellow-50 border-t border-yellow-200 p-3'>\n          <div className='flex items-center text-yellow-800'>\n            <div className='w-2 h-2 bg-yellow-400 rounded-full mr-2'></div>\n            <span className='text-sm'>Reconnecting to chat...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Chat;\n"],"names":["useChat","roomId","role","sender","secret","messages","setMessages","useState","loading","setLoading","error","setError","isConnected","setIsConnected","lastMessageTime","setLastMessageTime","apiSendMessage","apiGetMessages","useApi","pollingIntervalRef","useRef","reconnectTimeoutRef","pollMessages","useCallback","data","prevMessages","existingIds","msg","newMessages","latestTime","a","b","err","startPolling","stopPolling","useEffect","sendMessage","message","messageSender","newMessage","loadInitialMessages","clearMessages","getMessageCount","getMessagesBySender","senderName","getLatestMessage","hasSenderSentMessages","getUniqueSenders","senders","formatMessage","getFormattedMessages","Chat","viewerId","senderSecret","setMessage","setSender","isTyping","setIsTyping","showEmojiPicker","setShowEmojiPicker","messagesEndRef","typingTimeoutRef","handleTyping","handleEmojiSelect","emoji","prev","handleSendMessage","e","handleKeyPress","formatTime","timestamp","getSenderDisplayName","msgSender","jsxs","jsx"],"mappings":"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"}