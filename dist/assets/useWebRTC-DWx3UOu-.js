import{r as o,j as X}from"./main-CLGuuGlj.js";const q=o.forwardRef(({className:c,...r},a)=>{const p=o.useRef(null),I=a||p;return o.useImperativeHandle(a,()=>p.current,[]),o.useEffect(()=>{const n=I.current;if(!n)return;const O=()=>{console.log("Video metadata loaded:",{duration:n.duration,videoWidth:n.videoWidth,videoHeight:n.videoHeight})},g=()=>{console.log("Video data loaded")},E=()=>{console.log("Video can start playing")},C=()=>{console.log("Video started playing")},w=()=>{console.log("Video paused")},u=()=>{console.log("Video ended")},T=_=>{console.error("Video error:",_)},D=()=>{console.log("Video waiting for data")},S=()=>{console.log("Video stalled")};return n.addEventListener("loadedmetadata",O),n.addEventListener("loadeddata",g),n.addEventListener("canplay",E),n.addEventListener("play",C),n.addEventListener("pause",w),n.addEventListener("ended",u),n.addEventListener("error",T),n.addEventListener("waiting",D),n.addEventListener("stalled",S),()=>{n.removeEventListener("loadedmetadata",O),n.removeEventListener("loadeddata",g),n.removeEventListener("canplay",E),n.removeEventListener("play",C),n.removeEventListener("pause",w),n.removeEventListener("ended",u),n.removeEventListener("error",T),n.removeEventListener("waiting",D),n.removeEventListener("stalled",S)}},[I]),X.jsx("video",{ref:I,className:c,"aria-label":"Screen sharing video stream",...r})});q.displayName="VideoPlayer";var G={};const z=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"}],W=[{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"},...G.TURN_SERVERS?JSON.parse(G.TURN_SERVERS):[]];function Q(c=!1){const r=[...z];return c&&W.length>0&&r.push(...W),r}const A=window.location.hostname==="localhost"||window.location.hostname.includes("localhost"),L={ERROR:0,WARN:1,INFO:2,DEBUG:3},F=A?L.DEBUG:L.ERROR;class d{static error(r,...a){F>=L.ERROR&&console.error(`[ERROR] ${r}`,...a)}static warn(r,...a){F>=L.WARN&&console.warn(`[WARN] ${r}`,...a)}static info(r,...a){F>=L.INFO&&console.info(`[INFO] ${r}`,...a)}static debug(r,...a){F>=L.DEBUG&&console.debug(`[DEBUG] ${r}`,...a)}static webrtc(r,a={}){A&&console.debug(`[WebRTC] ${r}`,a)}static api(r,a,p={}){A&&console.debug(`[API] ${r} ${a}`,p)}static user(r,a={}){A&&console.debug(`[USER] ${r}`,a)}}const te={DISCONNECTED:"disconnected",CONNECTING:"connecting",CONNECTED:"connected"},ne={ROOM_NOT_FOUND:"Room not found. Please check the room ID and make sure the host has started sharing.",CONNECTION_FAILED:"Failed to connect to host. Please check the room ID and try again.",SCREEN_SHARE_FAILED:"Failed to start screen sharing. Please check your browser permissions.",INVALID_ROOM_ID:"Room ID must be exactly 24 characters and contain only letters and numbers",INVALID_VIEWER_ID:"Viewer ID can only contain letters, numbers, spaces, hyphens, and underscores",CONNECTION_TIMEOUT:"Connection timeout. Please try again."},re={CONNECT_TO_HOST:"Connect to Host",DISCONNECT:"Disconnect",RECONNECT:"Reconnect",CONNECTING:"Connecting...",CONNECTED:"Connected",DISCONNECTED:"Disconnected",HOST_ONLINE:"Host Online",HOST_OFFLINE:"Host Offline",CONNECTING_TO_HOST:"Connecting to Host...",UNKNOWN:"Unknown"},ae={SUCCESS:"text-green-600",WARNING:"text-yellow-600",ERROR:"text-red-600",DEFAULT:"text-gray-600"},Y={DEFAULT:1e3},oe={CONFIG:"/api/config",CREATE_ROOM:"/api/create-room",OFFER:"/api/offer",ANSWER:"/api/answer",CANDIDATE:"/api/candidate",CHAT:"/api/chat",DIAGNOSTICS:"/api/diagnostics",VIEWERS:"/api/viewers",REGISTER_SENDER:"/api/register-sender"};function Z(c,r={}){const{initialInterval:a=Y.DEFAULT,maxInterval:p=3e4,backoffFactor:I=1.5,maxPolls:n=60,backoffAfter:O=10}=r;return async()=>{let g=0,E=a;const C=async()=>{try{if(g++,g>n)throw new Error("Polling timeout reached");const w=await c();return w||(g>O&&(E=Math.min(E*I,p)),new Promise((u,T)=>{const D=setTimeout(async()=>{try{const S=await C();u(S)}catch(S){T(S)}},E);C.timeoutId=D}))}catch(w){throw w}};return C()}}function ce(c,r,a,p=null){const[I,n]=o.useState("disconnected"),[O,g]=o.useState(null),[E,C]=o.useState(null),[w,u]=o.useState(null),[T,D]=o.useState({}),[S,_]=o.useState([]),R=o.useRef(null),M=o.useRef(null),s=o.useRef(null),l=o.useRef(null),v=o.useRef(null),N=o.useRef(!0);o.useEffect(()=>{const e=Q(a?.useTurn!==!1);_(e)},[a]);const $=o.useCallback(async e=>{if(!(!c||!r))try{const t=await fetch("/api/candidate",{method:"POST",headers:{"Content-Type":"application/json",...a?.authSecret&&{"x-auth-secret":a.authSecret}},body:JSON.stringify({roomId:c,role:r,viewerId:p,candidate:e})});if(!t.ok)throw new Error(`Failed to send ICE candidate: ${t.status}`)}catch(t){d.error("Error sending ICE candidate:",t),u(`Failed to send ICE candidate: ${t.message}`)}},[c,r,a,p]),b=o.useCallback(()=>{const e=new RTCPeerConnection({iceServers:S});return e.onicecandidate=t=>{t.candidate&&$(t.candidate)},e.onconnectionstatechange=()=>{d.webrtc("Connection state changed",{state:e.connectionState}),n(e.connectionState),(e.connectionState==="connected"||e.connectionState==="failed")&&(s.current&&(clearInterval(s.current),s.current=null),l.current&&(clearInterval(l.current),l.current=null),v.current&&(clearInterval(v.current),v.current=null))},e.oniceconnectionstatechange=()=>{d.webrtc("ICE connection state changed",{state:e.iceConnectionState})},e.ontrack=t=>{d.webrtc("Received remote stream",{stream:t.streams[0]}),g(t.streams[0])},e.ondatachannel=t=>{const f=t.channel;M.current=f,f.onopen=()=>{d.webrtc("Data channel opened")},f.onmessage=h=>{d.webrtc("Received data channel message",{data:h.data})}},e},[S,$]),V=o.useCallback(async e=>{if(c)try{const t=await fetch("/api/offer",{method:"POST",headers:{"Content-Type":"application/json",...a?.authSecret&&{"x-auth-secret":a.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!t.ok)throw new Error(`Failed to send offer: ${t.status}`)}catch(t){d.error("Error sending offer:",t),u(`Failed to send offer: ${t.message}`)}},[c,a]),x=o.useCallback(async e=>{if(c)try{const t=await fetch("/api/answer",{method:"POST",headers:{"Content-Type":"application/json",...a?.authSecret&&{"x-auth-secret":a.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!t.ok)throw new Error(`Failed to send answer: ${t.status}`)}catch(t){d.error("Error sending answer:",t),u(`Failed to send answer: ${t.message}`)}},[c,a]),U=o.useCallback(async()=>{s.current&&clearInterval(s.current);let e=0,t=1e3;const f=60,h=async()=>{try{if(e++,e>f){clearInterval(s.current),s.current=null,N.current&&(u("Connection timeout: No offer received from host. Make sure the host has started sharing."),n("failed"));return}const i=await fetch(`/api/offer?roomId=${c}`);if(i.ok){const y=await i.json();if(y.desc){clearInterval(s.current),s.current=null;const m=b();R.current=m,await m.setRemoteDescription(y.desc);const H=await m.createAnswer();await m.setLocalDescription(H),await x(H),k()}}else i.status===404?e>10&&(clearInterval(s.current),t=5e3,s.current=setInterval(h,t)):(d.error("Unexpected error polling for offers:",i.status),clearInterval(s.current),s.current=null,N.current&&(u(`Server error: ${i.status}`),n("failed")))}catch(i){d.error("Error polling for offers:",i),clearInterval(s.current),s.current=null,N.current&&(u(`Network error: ${i.message}`),n("failed"))}};s.current=setInterval(h,t)},[c,x,b,k]),j=o.useCallback(async()=>{l.current&&clearInterval(l.current);let e=0,t=1e3;const f=60,h=async()=>{try{if(e++,e>f){clearInterval(l.current),l.current=null,N.current&&(u("Connection timeout: No answer received from viewer. Make sure the viewer has connected."),n("failed"));return}const i=await fetch(`/api/answer?roomId=${c}`);if(i.ok){const y=await i.json();if(y.desc){clearInterval(l.current),l.current=null;const m=R.current;m&&await m.setRemoteDescription(y.desc)}}else i.status===404?e>10&&(clearInterval(l.current),t=5e3,l.current=setInterval(h,t)):(d.error("Unexpected error polling for answers:",i.status),clearInterval(l.current),l.current=null,N.current&&(u(`Server error: ${i.status}`),n("failed")))}catch(i){d.error("Error polling for answers:",i),clearInterval(l.current),l.current=null,N.current&&(u(`Network error: ${i.message}`),n("failed"))}};l.current=setInterval(h,t)},[c]),k=o.useCallback(async()=>{v.current&&clearInterval(v.current);const t=Z(async()=>{const f=await fetch(`/api/candidate?roomId=${c}&role=${r}${p?`&viewerId=${p}`:""}`);if(f.ok){const h=await f.json();if(h.candidates&&h.candidates.length>0){const i=R.current;if(i)for(const y of h.candidates)try{await i.addIceCandidate(y)}catch(m){d.warn("Failed to add ICE candidate:",m)}return!0}}else if(f.status!==404)throw d.error("Error polling for ICE candidates:",f.status),new Error(`HTTP ${f.status}`);return!1},{initialInterval:1e3,maxInterval:1e4,backoffFactor:1.5,maxPolls:120,backoffAfter:10});try{await t()}catch{d.warn("ICE candidate polling timeout - connection may be stuck")}},[c,r,p]),B=o.useCallback(async()=>{if(r!=="host")throw new Error("Only hosts can start screen sharing");try{u(null),n("connecting");const e=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0});C(e);const t=b();R.current=t,e.getTracks().forEach(h=>{t.addTrack(h,e)});const f=await t.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return await t.setLocalDescription(f),await V(f),j(),k(),e}catch(e){throw d.error("Error starting screen share:",e),u(`Failed to start screen sharing: ${e.message}`),n("disconnected"),e}},[r,b,V,j,k]),J=o.useCallback(async()=>{if(r!=="viewer")throw new Error("Only viewers can connect to host");try{u(null),n("connecting"),U()}catch(e){throw d.error("Error connecting to host:",e),u(`Failed to connect to host: ${e.message}`),n("disconnected"),e}},[r,U]),P=o.useCallback(async()=>{try{E&&(E.getTracks().forEach(e=>e.stop()),C(null)),R.current&&(R.current.close(),R.current=null),s.current&&(clearInterval(s.current),s.current=null),l.current&&(clearInterval(l.current),l.current=null),v.current&&(clearInterval(v.current),v.current=null),n("disconnected"),g(null)}catch(e){d.error("Error stopping screen share:",e),u(`Failed to stop screen sharing: ${e.message}`)}},[E]),K=o.useCallback(async()=>{await P()},[P]);return o.useEffect(()=>()=>{N.current=!1,s.current&&clearInterval(s.current),l.current&&clearInterval(l.current),v.current&&clearInterval(v.current),R.current&&R.current.close(),E&&E.getTracks().forEach(e=>e.stop())},[E]),{connectionState:I,remoteStream:O,localStream:E,error:w,peerConnections:T,startScreenShare:B,stopScreenShare:P,connectToHost:J,disconnect:K}}export{oe as A,te as C,ne as E,ae as S,re as U,q as V,ce as u};
//# sourceMappingURL=useWebRTC-DWx3UOu-.js.map
