{"version":3,"file":"ViewerView-Did0dEKk.js","sources":["../../src/utils/validation.js","../../src/components/ViewerView.jsx"],"sourcesContent":["/**\n * Client-side validation utilities\n * Shared validation logic between client and server\n */\n\n/**\n * Validate room ID format\n * @param {string} roomId - Room ID to validate\n * @returns {object} Validation result\n */\nexport const validateRoomId = (roomId) => {\n  if (!roomId || typeof roomId !== 'string') {\n    return { valid: false, error: 'Room ID is required' };\n  }\n\n  const trimmed = roomId.trim();\n  if (trimmed.length === 0) {\n    return { valid: false, error: 'Room ID cannot be empty' };\n  }\n\n  // Check if it's a valid 24-character hex string\n  const hexPattern = /^[a-f0-9]{24}$/i;\n  if (!hexPattern.test(trimmed)) {\n    return { valid: false, error: 'Room ID must be exactly 24 characters and contain only letters and numbers' };\n  }\n\n  return { valid: true };\n};\n\n/**\n * Validate viewer ID format\n * @param {string} viewerId - Viewer ID to validate\n * @returns {object} Validation result\n */\nexport const validateViewerId = (viewerId) => {\n  if (!viewerId || typeof viewerId !== 'string') {\n    return { valid: false, error: 'Viewer ID is required' };\n  }\n\n  const trimmed = viewerId.trim();\n  if (trimmed.length === 0) {\n    return { valid: false, error: 'Viewer ID cannot be empty' };\n  }\n\n  if (trimmed.length < 3) {\n    return { valid: false, error: 'Viewer ID must be at least 3 characters long' };\n  }\n\n  if (trimmed.length > 50) {\n    return { valid: false, error: 'Viewer ID must be 50 characters or less' };\n  }\n\n  // Allow alphanumeric characters, spaces, hyphens, and underscores\n  const validPattern = /^[a-zA-Z0-9\\s\\-_]+$/;\n  if (!validPattern.test(trimmed)) {\n    return { valid: false, error: 'Viewer ID can only contain letters, numbers, spaces, hyphens, and underscores' };\n  }\n\n  return { valid: true };\n};\n\n/**\n * Validate chat message\n * @param {string} message - Message to validate\n * @returns {object} Validation result\n */\nexport const validateMessage = (message) => {\n  if (!message || typeof message !== 'string') {\n    return { valid: false, error: 'Message is required' };\n  }\n\n  const trimmed = message.trim();\n  if (trimmed.length === 0) {\n    return { valid: false, error: 'Message cannot be empty' };\n  }\n\n  if (trimmed.length > 500) {\n    return { valid: false, error: 'Message must be 500 characters or less' };\n  }\n\n  return { valid: true };\n};\n","import { useState, useEffect, useRef, useCallback } from 'react';\nimport VideoPlayer from './VideoPlayer';\nimport { useWebRTC } from '../hooks/useWebRTC';\nimport { useRoomContext } from '../contexts/RoomContext';\nimport { validateRoomId, validateViewerId } from '../utils/validation';\nimport { CONNECTION_STATES, UI_TEXT, STATUS_COLORS, ERROR_MESSAGES, API_ENDPOINTS } from '../constants';\n\nfunction ViewerView({ config, onGoHome }) {\n  const { roomId, viewerId, updateViewerId, updateSenderSecret } = useRoomContext();\n  const [error, setError] = useState(null);\n  // Remove redundant state - derive everything from connectionState\n  // Removed unused _roomIdError state (dead code)\n  const [viewerIdError, setViewerIdError] = useState(null);\n  // Remove local senderSecret state - use context instead\n\n  const remoteVideoRef = useRef(null);\n\n  // Validation functions (only for viewerId since roomId comes from context)\n  const validateViewerIdInput = useCallback((value) => {\n    const validation = validateViewerId(value);\n    setViewerIdError(validation.valid ? null : validation.error);\n    return validation.valid;\n  }, []);\n\n  const {\n    connectToHost,\n    disconnect,\n    connectionState,\n    remoteStream,\n    error: webrtcError,\n  } = useWebRTC(roomId, 'viewer', config, viewerId);\n\n  // Derive all status from WebRTC state - single source of truth\n  const connectionStatus = connectionState;\n  const isConnected = connectionState === CONNECTION_STATES.CONNECTED;\n  const isConnecting = connectionState === CONNECTION_STATES.CONNECTING;\n  const hostStatus = connectionState; // Use connectionState directly\n\n  // Handle remote stream\n  useEffect(() => {\n    if (remoteStream && remoteVideoRef.current) {\n      remoteVideoRef.current.srcObject = remoteStream;\n    }\n  }, [remoteStream]);\n\n  // Handle WebRTC errors and clear errors on success\n  useEffect(() => {\n    if (webrtcError) {\n      setError(webrtcError);\n    } else if (connectionState === CONNECTION_STATES.CONNECTED) {\n      // Clear errors when connection succeeds\n      setError(null);\n    }\n  }, [webrtcError, connectionState]);\n\n  // Validate room exists\n  const validateRoom = useCallback(async (roomId) => {\n    try {\n      const response = await fetch(`${API_ENDPOINTS.DIAGNOSTICS}?roomId=${roomId}`);\n      if (response.ok) {\n        const data = await response.json();\n        return data.room?.exists === true;\n      }\n      return false;\n    } catch (err) {\n      console.error('Error validating room:', err);\n      return false;\n    }\n  }, []);\n\n  // Handle connection to host\n  const handleConnect = useCallback(async () => {\n    // Clear previous errors\n    setError(null);\n    setRoomIdError(null);\n    setViewerIdError(null);\n\n    // Validate inputs\n    // RoomId comes from context, no need to validate here\n    const isViewerIdValid = validateViewerIdInput(viewerId);\n\n    if (!isViewerIdValid) {\n      return; // Validation errors are already set by validation functions\n    }\n\n    try {\n      setError(null);\n      // State will be managed by WebRTC hook\n\n      // Validate room exists first\n      const roomExists = await validateRoom(roomId);\n      if (!roomExists) {\n        setError(ERROR_MESSAGES.ROOM_NOT_FOUND);\n        return;\n      }\n\n      await connectToHost();\n\n      // Register sender ID for chat if viewerId is provided\n      if (viewerId && viewerId.trim()) {\n        try {\n          const response = await fetch(API_ENDPOINTS.REGISTER_SENDER, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ roomId, senderId: viewerId.trim() }),\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            updateSenderSecret(data.secret); // Store the secret in context\n          }\n        } catch (err) {\n          console.warn('Failed to register sender ID:', err);\n        }\n      }\n\n      // Don't set hostStatus to 'connected' here - let the WebRTC connection state handle it\n    } catch (err) {\n      console.error('Error connecting to host:', err);\n      setError(ERROR_MESSAGES.CONNECTION_FAILED);\n    }\n  }, [roomId, connectToHost, validateRoom, viewerId, validateViewerIdInput, updateSenderSecret]);\n\n  // Removed auto-connect logic - user must manually click \"Connect to Host\"\n\n  // Handle disconnection\n  const handleDisconnect = async () => {\n    try {\n      await disconnect();\n      if (remoteVideoRef.current) {\n        remoteVideoRef.current.srcObject = null;\n      }\n    } catch (err) {\n      console.error('Error disconnecting:', err);\n    }\n  };\n\n  // Handle reconnection\n  const handleReconnect = () => {\n    handleDisconnect().then(() => {\n      setTimeout(handleConnect, 1000);\n    });\n  };\n\n  // Generate cryptographically secure viewer ID\n  const generateViewerId = () => {\n    // Use crypto.randomUUID() for cryptographically secure randomness\n    const id = `viewer_${crypto.randomUUID().substring(0, 8)}`;\n    updateViewerId(id);\n    return id;\n  };\n\n  // Get connection status color\n  const getStatusColor = () => {\n    switch (connectionStatus) {\n      case CONNECTION_STATES.CONNECTED:\n        return STATUS_COLORS.SUCCESS;\n      case CONNECTION_STATES.CONNECTING:\n        return STATUS_COLORS.WARNING;\n      case CONNECTION_STATES.DISCONNECTED:\n        return STATUS_COLORS.ERROR;\n      default:\n        return STATUS_COLORS.DEFAULT;\n    }\n  };\n\n  // Get connection status text\n  const getStatusText = () => {\n    switch (connectionStatus) {\n      case CONNECTION_STATES.CONNECTED:\n        return UI_TEXT.CONNECTED;\n      case CONNECTION_STATES.CONNECTING:\n        return UI_TEXT.CONNECTING;\n      case CONNECTION_STATES.DISCONNECTED:\n        return UI_TEXT.DISCONNECTED;\n      default:\n        return UI_TEXT.UNKNOWN;\n    }\n  };\n\n  // Get host status color\n  const getHostStatusColor = () => {\n    switch (hostStatus) {\n      case CONNECTION_STATES.CONNECTED:\n        return STATUS_COLORS.SUCCESS;\n      case CONNECTION_STATES.CONNECTING:\n        return STATUS_COLORS.WARNING;\n      case CONNECTION_STATES.DISCONNECTED:\n        return STATUS_COLORS.ERROR;\n      default:\n        return STATUS_COLORS.DEFAULT;\n    }\n  };\n\n  // Get host status text\n  const getHostStatusText = () => {\n    switch (hostStatus) {\n      case CONNECTION_STATES.CONNECTED:\n        return UI_TEXT.HOST_ONLINE;\n      case CONNECTION_STATES.CONNECTING:\n        return UI_TEXT.CONNECTING_TO_HOST;\n      case CONNECTION_STATES.DISCONNECTED:\n        return UI_TEXT.HOST_OFFLINE;\n      default:\n        return UI_TEXT.UNKNOWN;\n    }\n  };\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div className='bg-white rounded-lg shadow-md p-6'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <h2 className='text-2xl font-bold text-gray-900 mb-2'>👀 Viewing Room</h2>\n            <p className='text-gray-600'>\n              Connected to room: <span className='font-mono font-medium'>{roomId}</span>\n            </p>\n          </div>\n          <div className='text-right'>\n            <div className={`text-sm font-medium ${getStatusColor()}`}>Connection: {getStatusText()}</div>\n            <div className={`text-sm font-medium ${getHostStatusColor()}`}>{getHostStatusText()}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Viewer ID Section */}\n      <div className='bg-white rounded-lg shadow-md p-6'>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Your Viewer ID</h3>\n        <div className='flex items-center space-x-4'>\n          <div className='flex-1'>\n            <input\n              type='text'\n              value={viewerId || ''}\n              onChange={(e) => {\n                updateViewerId(e.target.value);\n                // Real-time validation\n                if (e.target.value.trim()) {\n                  validateViewerIdInput(e.target.value);\n                } else {\n                  setViewerIdError(null);\n                }\n              }}\n              placeholder='Enter your name or leave blank for auto-generated ID'\n              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 ${\n                viewerIdError ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'\n              }`}\n            />\n            {viewerIdError && <p className='text-red-500 text-sm mt-1'>{viewerIdError}</p>}\n          </div>\n          <button\n            onClick={generateViewerId}\n            className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\n          >\n            Generate ID\n          </button>\n        </div>\n        <p className='text-sm text-gray-500 mt-2'>This ID helps identify you in the chat and diagnostics.</p>\n      </div>\n\n      {/* Connection Controls */}\n      <div className='bg-white rounded-lg shadow-md p-6'>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Connection Controls</h3>\n        <div className='flex items-center justify-center space-x-4'>\n          {!isConnected ? (\n            <button\n              onClick={handleConnect}\n              disabled={isConnecting}\n              className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n                isConnecting\n                  ? 'bg-gray-400 text-white cursor-not-allowed'\n                  : 'bg-green-600 text-white hover:bg-green-700'\n              }`}\n            >\n              {isConnecting ? UI_TEXT.CONNECTING : UI_TEXT.CONNECT_TO_HOST}\n            </button>\n          ) : (\n            <div className='flex items-center space-x-4'>\n              <button\n                onClick={handleReconnect}\n                className='px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors'\n              >\n                {UI_TEXT.RECONNECT}\n              </button>\n              <button\n                onClick={handleDisconnect}\n                className='px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors'\n              >\n                {UI_TEXT.DISCONNECT}\n              </button>\n            </div>\n          )}\n        </div>\n\n        {isConnected && (\n          <div className='mt-4 text-center'>\n            <div className='flex items-center justify-center space-x-2 text-green-600'>\n              <div className='w-2 h-2 bg-green-600 rounded-full animate-pulse'></div>\n              <span className='text-sm font-medium'>Connected to Host</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className='bg-red-50 border border-red-200 rounded-lg p-4'>\n          <div className='flex items-center'>\n            <div className='text-red-600 mr-2'>⚠️</div>\n            <div>\n              <h4 className='text-red-800 font-medium'>Connection Error</h4>\n              <p className='text-red-700 text-sm mt-1'>{error}</p>\n            </div>\n          </div>\n          <div className='mt-3'>\n            <button\n              onClick={handleReconnect}\n              className='text-sm bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 transition-colors'\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Remote Video Display */}\n      {isConnected && (\n        <div className='bg-white rounded-lg shadow-md p-6'>\n          <h3 className='text-lg font-semibold text-gray-900 mb-4'>Host's Screen</h3>\n          <div className='relative'>\n            <VideoPlayer\n              ref={remoteVideoRef}\n              className='w-full max-w-4xl mx-auto rounded-lg border border-gray-200 bg-black'\n              autoPlay\n              playsInline\n            />\n            {!remoteStream && (\n              <div className='absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg'>\n                <div className='text-center'>\n                  <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'></div>\n                  <p className='text-gray-600'>Waiting for host to start sharing...</p>\n                </div>\n              </div>\n            )}\n            {remoteStream && (\n              <div className='absolute top-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs'>\n                Live\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Waiting State */}\n      {!isConnected && !isConnecting && (\n        <div className='bg-white rounded-lg shadow-md p-6'>\n          <div className='text-center py-12'>\n            <div className='text-6xl mb-4'>📺</div>\n            <h3 className='text-xl font-semibold text-gray-900 mb-2'>Ready to View</h3>\n            <p className='text-gray-600 mb-6'>\n              Use the \"Connect to Host\" button above to start viewing the shared screen.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className='bg-blue-50 border border-blue-200 rounded-lg p-6'>\n        <h3 className='text-lg font-semibold text-blue-900 mb-4'>📋 Instructions</h3>\n        <div className='space-y-2 text-sm text-blue-800'>\n          <p>• Make sure the host has started sharing their screen</p>\n          <p>• Click \"Connect to Host\" to join the viewing session</p>\n          <p>• Use the Chat feature to communicate with the host</p>\n          <p>• The screen will appear automatically when the host starts sharing</p>\n          <p>• Click \"Disconnect\" when you're done viewing</p>\n        </div>\n      </div>\n\n      {/* Actions */}\n      <div className='flex justify-center space-x-4'>\n        <button\n          onClick={onGoHome}\n          className='px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors'\n        >\n          Back to Home\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ViewerView;\n"],"names":["validateViewerId","viewerId","trimmed","ViewerView","config","onGoHome","roomId","updateViewerId","updateSenderSecret","useRoomContext","error","setError","useState","viewerIdError","setViewerIdError","remoteVideoRef","useRef","validateViewerIdInput","useCallback","value","validation","connectToHost","disconnect","connectionState","remoteStream","webrtcError","useWebRTC","connectionStatus","isConnected","CONNECTION_STATES","isConnecting","hostStatus","useEffect","validateRoom","response","API_ENDPOINTS","err","handleConnect","ERROR_MESSAGES","data","handleDisconnect","handleReconnect","generateViewerId","id","getStatusColor","STATUS_COLORS","getStatusText","UI_TEXT","getHostStatusColor","getHostStatusText","jsxs","jsx","e","VideoPlayer"],"mappings":"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"}