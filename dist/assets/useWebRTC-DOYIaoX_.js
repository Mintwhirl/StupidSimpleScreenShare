import{r as o,j as ee}from"./main-DCVUQinG.js";const re=o.forwardRef(({className:d,...c},s)=>{const h=o.useRef(null),T=s||h;return o.useImperativeHandle(s,()=>h.current,[]),o.useEffect(()=>{const n=T.current;if(!n)return;const R=()=>{console.log("Video metadata loaded:",{duration:n.duration,videoWidth:n.videoWidth,videoHeight:n.videoHeight})},C=()=>{console.log("Video data loaded")},I=()=>{console.log("Video can start playing")},S=()=>{console.log("Video started playing")},k=()=>{console.log("Video paused")},w=()=>{console.log("Video ended")},v=x=>{console.error("Video error:",x)},D=()=>{console.log("Video waiting for data")},y=()=>{console.log("Video stalled")};return n.addEventListener("loadedmetadata",R),n.addEventListener("loadeddata",C),n.addEventListener("canplay",I),n.addEventListener("play",S),n.addEventListener("pause",k),n.addEventListener("ended",w),n.addEventListener("error",v),n.addEventListener("waiting",D),n.addEventListener("stalled",y),()=>{n.removeEventListener("loadedmetadata",R),n.removeEventListener("loadeddata",C),n.removeEventListener("canplay",I),n.removeEventListener("play",S),n.removeEventListener("pause",k),n.removeEventListener("ended",w),n.removeEventListener("error",v),n.removeEventListener("waiting",D),n.removeEventListener("stalled",y)}},[T]),ee.jsx("video",{ref:T,className:d,"aria-label":"Screen sharing video stream",...c})});re.displayName="VideoPlayer";var K={};const ne=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"}],B=[{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"},...K.TURN_SERVERS?(()=>{try{return JSON.parse(K.TURN_SERVERS)}catch(d){return console.error("Invalid TURN_SERVERS JSON:",d),[]}})():[]];function J(d=!1){const c=[...ne];return d&&B.length>0&&c.push(...B),c}const U=window.location.hostname==="localhost"||window.location.hostname.includes("localhost"),L={ERROR:0,WARN:1,INFO:2,DEBUG:3},b=U?L.DEBUG:L.ERROR;class a{static error(c,...s){b>=L.ERROR&&console.error(`[ERROR] ${c}`,...s)}static warn(c,...s){b>=L.WARN&&console.warn(`[WARN] ${c}`,...s)}static info(c,...s){b>=L.INFO&&console.info(`[INFO] ${c}`,...s)}static debug(c,...s){b>=L.DEBUG&&console.debug(`[DEBUG] ${c}`,...s)}static webrtc(c,s={}){U&&console.debug(`[WebRTC] ${c}`,s)}static api(c,s,h={}){U&&console.debug(`[API] ${c} ${s}`,h)}static user(c,s={}){U&&console.debug(`[USER] ${c}`,s)}}const se={DISCONNECTED:"disconnected",CONNECTING:"connecting",CONNECTED:"connected"},ie={ROOM_NOT_FOUND:"Room not found. Please check the room ID and make sure the host has started sharing.",CONNECTION_FAILED:"Failed to connect to host. Please check the room ID and try again.",SCREEN_SHARE_FAILED:"Failed to start screen sharing. Please check your browser permissions.",INVALID_ROOM_ID:"Room ID must be exactly 24 characters and contain only letters and numbers",INVALID_VIEWER_ID:"Viewer ID can only contain letters, numbers, spaces, hyphens, and underscores",CONNECTION_TIMEOUT:"Connection timeout. Please try again."},le={CONNECT_TO_HOST:"Connect to Host",DISCONNECT:"Disconnect",RECONNECT:"Reconnect",CONNECTING:"Connecting...",CONNECTED:"Connected",DISCONNECTED:"Disconnected",HOST_ONLINE:"Host Online",HOST_OFFLINE:"Host Offline",CONNECTING_TO_HOST:"Connecting to Host...",UNKNOWN:"Unknown"},de={SUCCESS:"text-green-600",WARNING:"text-yellow-600",ERROR:"text-red-600",DEFAULT:"text-gray-600"},te={DEFAULT:1e3},ue={CONFIG:"/api/config",CREATE_ROOM:"/api/create-room",OFFER:"/api/offer",ANSWER:"/api/answer",CANDIDATE:"/api/candidate",CHAT:"/api/chat",DIAGNOSTICS:"/api/diagnostics",VIEWERS:"/api/viewers",REGISTER_SENDER:"/api/register-sender"};function ae(d,c={}){const{initialInterval:s=te.DEFAULT,maxInterval:h=3e4,backoffFactor:T=1.5,maxPolls:n=60,backoffAfter:R=10}=c;return async()=>{let C=0,I=s;const S=async()=>{if(C++,C>n)throw new Error("Polling timeout reached");const k=await d();return k||(C>R&&(I=Math.min(I*T,h)),new Promise((w,v)=>{const D=setTimeout(async()=>{try{const y=await S();w(y)}catch(y){v(y)}},I);S.timeoutId=D}))};return S()}}function fe(d,c,s,h=null){const[T,n]=o.useState("disconnected"),[R,C]=o.useState(null),[I,S]=o.useState(null),[k,w]=o.useState(null),[v,D]=o.useState([]),[y,x]=o.useState(new Map),[q,oe]=o.useState(0),[X,A]=o.useState({type:null,code:null,message:null,details:null}),f=o.useRef(null),z=o.useRef(null),E=o.useRef(null),p=o.useRef(null),m=o.useRef(null),O=o.useRef(!0),_=o.useRef(null);o.useEffect(()=>{const r=J(s?.useTurn!==!1);D(r)},[s]);const l=o.useCallback((r,e,t,u=null)=>{A({type:r,code:e,message:t,details:u}),w(t),a.error(`WebRTC Error [${r}]: ${t}`,{code:e,details:u})},[]),$=o.useCallback(async r=>{if(!(!d||!c))try{const e=await fetch("/api/candidate",{method:"POST",headers:{"Content-Type":"application/json",...s?.authSecret&&{"x-auth-secret":s.authSecret}},body:JSON.stringify({roomId:d,role:c,viewerId:h,candidate:r})});if(!e.ok)throw new Error(`Failed to send ICE candidate: ${e.status}`)}catch(e){a.error("Error sending ICE candidate:",e),l("network","SEND_ICE_CANDIDATE_FAILED","Failed to send ICE candidate to server. Please check your connection and try again.",e.message)}},[d,c,s,h,l]),P=o.useCallback(()=>{const r=v.length>0?v:J(!0),e=new RTCPeerConnection({iceServers:r});return e.onicecandidate=t=>{if(t.candidate)try{t.candidate.candidate&&t.candidate.sdpMid!==void 0&&t.candidate.sdpMLineIndex!==void 0?$(t.candidate):a.warn("Invalid ICE candidate received, skipping:",t.candidate)}catch(u){a.error("Error handling ICE candidate:",u)}},e.onicegatheringstatechange=()=>{a.webrtc("ICE gathering state changed",{state:e.iceGatheringState}),e.iceGatheringState==="complete"&&l("webrtc","ICE_GATHERING_TIMEOUT","Failed to send offer - no ICE candidates generated for network connection","ICE gathering completed without generating any candidates")},e.onconnectionstatechange=()=>{a.webrtc("Connection state changed",{state:e.connectionState}),n(e.connectionState),e.connectionState==="connected"&&(w(null),A({type:null,code:null,message:null,details:null})),(e.connectionState==="connected"||e.connectionState==="failed")&&(E.current&&(clearInterval(E.current),E.current=null),p.current&&(clearInterval(p.current),p.current=null),m.current&&(clearInterval(m.current),m.current=null)),(e.connectionState==="disconnected"||e.connectionState==="failed"||e.connectionState==="closed")&&setTimeout(()=>{if(f.current===e)try{e.close(),f.current=null}catch(t){a.error("Error during peer connection cleanup:",t)}},0)},e.oniceconnectionstatechange=()=>{a.webrtc("ICE connection state changed",{state:e.iceConnectionState}),e.iceConnectionState==="failed"&&(n("failed"),l("webrtc","ICE_CONNECTION_FAILED","Connection failed - unable to establish network connection",`ICE connection state: ${e.iceConnectionState}`),setTimeout(()=>{if(f.current===e)try{e.close(),f.current=null}catch(t){a.error("Error during peer connection cleanup on ICE failure:",t)}},0))},e.ontrack=t=>{a.webrtc("Received remote stream",{stream:t.streams[0]}),C(t.streams[0])},e.ondatachannel=t=>{const u=t.channel;z.current=u,u.onopen=()=>{a.webrtc("Data channel opened")},u.onmessage=i=>{a.webrtc("Received data channel message",{data:i.data})}},e},[v,$]),M=o.useCallback(async r=>{if(d)try{const e=await fetch("/api/offer",{method:"POST",headers:{"Content-Type":"application/json",...s?.authSecret&&{"x-auth-secret":s.authSecret}},body:JSON.stringify({roomId:d,desc:r})});if(!e.ok)throw new Error(`Failed to send offer: ${e.status}`)}catch(e){throw a.error("Error sending offer:",e),l("network","SEND_OFFER_FAILED","Failed to send offer to server. Please check your connection and try again.",e.message),e}},[d,s,l]),G=o.useCallback(async r=>{if(d)try{const e=await fetch("/api/answer",{method:"POST",headers:{"Content-Type":"application/json",...s?.authSecret&&{"x-auth-secret":s.authSecret}},body:JSON.stringify({roomId:d,desc:r})});if(!e.ok)throw new Error(`Failed to send answer: ${e.status}`)}catch(e){throw a.error("Error sending answer:",e),l("network","SEND_ANSWER_FAILED","Failed to send answer to server. Please check your connection and try again.",e.message),e}},[d,s,l]),F=o.useCallback(async()=>{m.current&&clearInterval(m.current);const e=ae(async()=>{try{const t=await fetch(`/api/candidate?roomId=${d}&role=${c}${h?`&viewerId=${h}`:""}`);if(t.ok){const u=await t.json();if(u.candidates&&u.candidates.length>0){const i=f.current;if(i)for(const g of u.candidates)try{g&&typeof g=="object"&&g.candidate&&g.sdpMid!==void 0&&g.sdpMLineIndex!==void 0?(await i.addIceCandidate(g),a.webrtc("Added ICE candidate",{candidate:g})):a.warn("Invalid ICE candidate received, skipping:",g)}catch(N){a.error("Error adding ICE candidate:",N)}return!0}}else return t.status===404?!1:(a.error("Error polling for ICE candidates:",t.status),!0);return!1}catch(t){return a.error("Network error polling for ICE candidates:",t),!1}},{initialInterval:1e3,maxInterval:5e3,maxPolls:30});try{await e()}catch(t){a.error("ICE candidate polling timeout:",t),O.current&&l("timeout","ICE_CANDIDATE_POLLING_TIMEOUT","ICE candidate polling timeout - connection may be unstable",t.message)}},[d,c,h]),W=o.useCallback(async()=>{E.current&&clearInterval(E.current);let r=0,e=1e3;const t=60,u=async()=>{try{if(r++,r>t){clearInterval(E.current),E.current=null,O.current&&(l("timeout","OFFER_POLLING_TIMEOUT","Connection timeout: No offer received from host. Make sure the host has started sharing.",`Polled ${t} times without receiving offer`),n("failed"));return}const i=await fetch(`/api/offer?roomId=${d}`);if(i.ok){const g=await i.json();if(g.desc){clearInterval(E.current),E.current=null;const N=P();f.current=N,await N.setRemoteDescription(g.desc);const j=await N.createAnswer();await N.setLocalDescription(j),await G(j),F()}}else i.status===404?r>10&&(clearInterval(E.current),e=5e3,E.current=setInterval(u,e)):(a.error("Unexpected error polling for offers:",i.status),clearInterval(E.current),E.current=null,O.current&&(l("network","SERVER_ERROR",`Server error while polling for offers: ${i.status}`,`HTTP ${i.status}`),n("failed")))}catch(i){a.error("Error polling for offers:",i),O.current&&l("network","NETWORK_ERROR","Network error while polling for offers. Please check your connection.",i.message)}};E.current=setInterval(u,e)},[d,G,P,F]),H=o.useCallback(async()=>{p.current&&clearInterval(p.current);let r=0,e=1e3;const t=60,u=async()=>{try{if(r++,r>t){clearInterval(p.current),p.current=null,O.current&&(l("timeout","ANSWER_POLLING_TIMEOUT","Connection timeout: No answer received from viewer. Make sure the viewer has connected.",`Polled ${t} times without receiving answer`),n("failed"));return}const i=await fetch(`/api/answer?roomId=${d}`);if(i.ok){const g=await i.json();if(g.desc){clearInterval(p.current),p.current=null;const N=f.current;N&&await N.setRemoteDescription(g.desc)}}else i.status===404?r>10&&(clearInterval(p.current),e=5e3,p.current=setInterval(u,e)):(a.error("Unexpected error polling for answers:",i.status),clearInterval(p.current),p.current=null,O.current&&(l("network","SERVER_ERROR",`Server error while polling for answers: ${i.status}`,`HTTP ${i.status}`),n("failed")))}catch(i){a.error("Error polling for answers:",i),O.current&&l("network","NETWORK_ERROR","Network error while polling for answers. Please check your connection.",i.message)}};return p.current=setInterval(u,e),Promise.resolve()},[d]),Q=o.useCallback(async()=>{if(c!=="host")throw new Error("Only hosts can start screen sharing");try{w(null),n("connecting");const r=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0}),e=r.getVideoTracks(),t=r.getAudioTracks();if(e.length===0)throw l("permission","VIDEO_DENIED","Video permission is required to share your screen. Please allow video access and try again.","User denied video permission in getDisplayMedia"),new Error("Video permission denied - cannot share screen without video");t.length===0&&a.warn("Audio permission denied - screen sharing will be video-only"),S(r),_.current=r;const u=P();f.current=u,r.getTracks().forEach(g=>{u.addTransceiver(g,{streams:[r],direction:"sendonly"})});const i=await u.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return await u.setLocalDescription(i),await M(i),H().catch(g=>{a.error("Answer polling failed:",g)}),F().catch(g=>{a.error("ICE candidate polling failed:",g)}),r}catch(r){if(a.error("Error starting screen share:",r),n("failed"),_.current&&(_.current.getTracks().forEach(e=>e.stop()),_.current=null,S(null)),f.current)try{f.current.close(),f.current=null}catch(e){a.error("Error during peer connection cleanup:",e)}throw r.message.includes("Permission denied")||r.message.includes("NotAllowedError")?l("permission","PERMISSION_DENIED","Screen sharing permission denied. Please allow screen sharing and try again.",r.message):r.message.includes("createOffer")?l("webrtc","CREATE_OFFER_FAILED","Failed to create WebRTC offer. Please try again.",r.message):r.message.includes("setLocalDescription")?l("webrtc","SET_LOCAL_DESCRIPTION_FAILED","Failed to set local description. Please try again.",r.message):r.message.includes("Failed to send offer")?l("network","SEND_OFFER_FAILED","Failed to send offer to server. Please check your connection and try again.",r.message):l("unknown","UNKNOWN_ERROR","An unexpected error occurred. Please try again.",r.message),r}},[c,P,M,H,F,l]),Y=o.useCallback(async()=>{if(c!=="viewer")throw new Error("Only viewers can connect to host");try{w(null),n("connecting"),W()}catch(r){if(a.error("Error connecting to host:",r),n("failed"),f.current)try{f.current.close(),f.current=null}catch(e){a.error("Error during peer connection cleanup:",e)}throw r.message.includes("Network error")||r.message.includes("fetch")?l("network","NETWORK_ERROR","Network connection failed. Please check your connection and try again.",r.message):r.message.includes("Room not found")||r.message.includes("404")?l("network","ROOM_NOT_FOUND","Room not found. Please check the room ID and try again.",r.message):l("unknown","UNKNOWN_ERROR","An unexpected error occurred. Please try again.",r.message),r}},[c,W]),V=o.useCallback(async()=>{try{if(I&&(I.getTracks().forEach(r=>r.stop()),S(null),_.current=null),R&&(R.getTracks().forEach(r=>r.stop()),C(null)),f.current)try{f.current.close(),f.current=null}catch(r){a.error("Error closing peer connection:",r)}E.current&&(clearInterval(E.current),E.current=null),p.current&&(clearInterval(p.current),p.current=null),m.current&&(clearInterval(m.current),m.current=null),n("disconnected"),C(null),w(null),A({type:null,code:null,message:null,details:null})}catch(r){a.error("Error stopping screen share:",r),w(`Failed to stop screen sharing: ${r.message}`)}},[I,R]),Z=o.useCallback(async()=>{await V()},[V]);return o.useEffect(()=>()=>{if(O.current=!1,E.current&&(clearInterval(E.current),E.current=null),p.current&&(clearInterval(p.current),p.current=null),m.current&&(clearInterval(m.current),m.current=null),f.current)try{f.current.close(),f.current=null}catch(e){a.error("Error during peer connection cleanup on unmount:",e)}const r=_.current;r&&(r.getTracks().forEach(e=>e.stop()),_.current=null),R&&R.getTracks().forEach(e=>e.stop()),w(null),A({type:null,code:null,message:null,details:null}),n("disconnected")},[R]),{connectionState:T,remoteStream:R,localStream:I,error:k,errorState:X,peerConnections:y,viewerCount:q,startScreenShare:Q,stopScreenShare:V,connectToHost:Y,disconnect:Z}}export{ue as A,se as C,ie as E,de as S,le as U,re as V,fe as u};
//# sourceMappingURL=useWebRTC-DOYIaoX_.js.map
