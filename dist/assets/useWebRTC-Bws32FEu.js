import{r as a,j as H}from"./main-DHFkaB8Q.js";const W=a.forwardRef(({className:o,...c},l)=>{const v=a.useRef(null),g=l||v;return a.useImperativeHandle(l,()=>v.current,[]),a.useEffect(()=>{const n=g.current;if(!n)return;const S=()=>{console.log("Video metadata loaded:",{duration:n.duration,videoWidth:n.videoWidth,videoHeight:n.videoHeight})},E=()=>{console.log("Video data loaded")},p=()=>{console.log("Video can start playing")},y=()=>{console.log("Video started playing")},C=()=>{console.log("Video paused")},i=()=>{console.log("Video ended")},I=T=>{console.error("Video error:",T)},k=()=>{console.log("Video waiting for data")},w=()=>{console.log("Video stalled")};return n.addEventListener("loadedmetadata",S),n.addEventListener("loadeddata",E),n.addEventListener("canplay",p),n.addEventListener("play",y),n.addEventListener("pause",C),n.addEventListener("ended",i),n.addEventListener("error",I),n.addEventListener("waiting",k),n.addEventListener("stalled",w),()=>{n.removeEventListener("loadedmetadata",S),n.removeEventListener("loadeddata",E),n.removeEventListener("canplay",p),n.removeEventListener("play",y),n.removeEventListener("pause",C),n.removeEventListener("ended",i),n.removeEventListener("error",I),n.removeEventListener("waiting",k),n.removeEventListener("stalled",w)}},[g]),H.jsx("video",{ref:g,className:o,...c})});W.displayName="VideoPlayer";const J=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"}],D=[{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"}];function _(o=!1){const c=[...J];return o&&D.length>0&&c.push(...D),c}function z(o,c,l,v=null){const[g,n]=a.useState("disconnected"),[S,E]=a.useState(null),[p,y]=a.useState(null),[C,i]=a.useState(null),[I,k]=a.useState({}),[w,T]=a.useState([]),h=a.useRef(null),N=a.useRef(null),r=a.useRef(null),f=a.useRef(null);a.useEffect(()=>{const e=_(l?.useTurn!==!1);T(e)},[l]);const b=a.useCallback(async e=>{if(!(!o||!c))try{const t=await fetch("/api/candidate",{method:"POST",headers:{"Content-Type":"application/json",...l?.authSecret&&{"x-auth-secret":l.authSecret}},body:JSON.stringify({roomId:o,role:c,viewerId:v,candidate:{candidate:e.candidate,sdpMid:e.sdpMid,sdpMLineIndex:e.sdpMLineIndex}})});if(!t.ok)throw new Error(`Failed to send ICE candidate: ${t.status}`)}catch(t){console.error("Error sending ICE candidate:",t),i(`Failed to send ICE candidate: ${t.message}`)}},[o,c,l]),R=a.useCallback(()=>{const e=new RTCPeerConnection({iceServers:w});return e.onicecandidate=t=>{t.candidate&&b(t.candidate)},e.onconnectionstatechange=()=>{console.log("Connection state changed:",e.connectionState),n(e.connectionState),(e.connectionState==="connected"||e.connectionState==="failed")&&(r.current&&(clearInterval(r.current),r.current=null),f.current&&(clearInterval(f.current),f.current=null))},e.oniceconnectionstatechange=()=>{console.log("ICE connection state changed:",e.iceConnectionState)},e.ontrack=t=>{console.log("Received remote stream:",t.streams[0]),E(t.streams[0])},e.ondatachannel=t=>{const d=t.channel;N.current=d,d.onopen=()=>{console.log("Data channel opened")},d.onmessage=s=>{console.log("Received data channel message:",s.data)}},e},[w,b]),j=a.useCallback(async e=>{if(o)try{const t=await fetch("/api/offer",{method:"POST",headers:{"Content-Type":"application/json",...l?.authSecret&&{"x-auth-secret":l.authSecret}},body:JSON.stringify({roomId:o,desc:e})});if(!t.ok)throw new Error(`Failed to send offer: ${t.status}`)}catch(t){console.error("Error sending offer:",t),i(`Failed to send offer: ${t.message}`)}},[o,l]),P=a.useCallback(async e=>{if(o)try{const t=await fetch("/api/answer",{method:"POST",headers:{"Content-Type":"application/json",...l?.authSecret&&{"x-auth-secret":l.authSecret}},body:JSON.stringify({roomId:o,desc:e})});if(!t.ok)throw new Error(`Failed to send answer: ${t.status}`)}catch(t){console.error("Error sending answer:",t),i(`Failed to send answer: ${t.message}`)}},[o,l]),V=a.useCallback(async()=>{r.current&&clearInterval(r.current);let e=0,t=1e3;const d=60,s=async()=>{try{if(e++,e>d){clearInterval(r.current),r.current=null,i("Connection timeout: No offer received from host. Make sure the host has started sharing."),n("failed");return}const u=await fetch(`/api/offer?roomId=${o}`);if(u.ok){const m=await u.json();if(m.desc){clearInterval(r.current),r.current=null;const L=h.current;if(L){await L.setRemoteDescription(m.desc);const O=await L.createAnswer();await L.setLocalDescription(O),await P(O)}}}else u.status===404?e>10&&(clearInterval(r.current),t=5e3,r.current=setInterval(s,t)):(console.error("Unexpected error polling for offers:",u.status),clearInterval(r.current),r.current=null,i(`Server error: ${u.status}`),n("failed"))}catch(u){console.error("Error polling for offers:",u),clearInterval(r.current),r.current=null,i(`Network error: ${u.message}`),n("failed")}};r.current=setInterval(s,t)},[o,P]),x=a.useCallback(async()=>{r.current&&clearInterval(r.current);let e=0,t=1e3;const d=async()=>{try{const s=await fetch(`/api/answer?roomId=${o}`);if(s.ok){const u=await s.json();if(u.desc){clearInterval(r.current),r.current=null;const m=h.current;m&&await m.setRemoteDescription(u.desc)}}else s.status===404?(e++,e>10&&(clearInterval(r.current),t=5e3,r.current=setInterval(d,t))):console.error("Unexpected error polling for answers:",s.status)}catch(s){console.error("Error polling for answers:",s)}};r.current=setInterval(d,t)},[o]),F=a.useCallback(async()=>{f.current&&clearInterval(f.current),f.current=setInterval(async()=>{try{const e=await fetch(`/api/candidate?roomId=${o}&role=${c}${v?`&viewerId=${v}`:""}`);if(e.ok){const t=await e.json();if(t.candidates&&t.candidates.length>0){const d=h.current;if(d)for(const s of t.candidates)try{await d.addIceCandidate(s)}catch(u){console.warn("Failed to add ICE candidate:",u)}}}else e.status!==404&&console.error("Error polling for ICE candidates:",e.status)}catch(e){console.error("Error polling for ICE candidates:",e)}},1e3)},[o,c]),M=a.useCallback(async()=>{if(c!=="host")throw new Error("Only hosts can start screen sharing");try{i(null),n("connecting");const e=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0});y(e);const t=R();h.current=t,e.getTracks().forEach(s=>{t.addTrack(s,e)});const d=await t.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return await t.setLocalDescription(d),await j(d),x(),e}catch(e){throw console.error("Error starting screen share:",e),i(`Failed to start screen sharing: ${e.message}`),n("disconnected"),e}},[c,R,j,x]),A=a.useCallback(async()=>{if(c!=="viewer")throw new Error("Only viewers can connect to host");try{i(null),n("connecting");const e=R();h.current=e,V(),F()}catch(e){throw console.error("Error connecting to host:",e),i(`Failed to connect to host: ${e.message}`),n("disconnected"),e}},[c,R,F,V]),$=a.useCallback(async()=>{try{p&&(p.getTracks().forEach(e=>e.stop()),y(null)),h.current&&(h.current.close(),h.current=null),r.current&&(clearInterval(r.current),r.current=null),f.current&&(clearInterval(f.current),f.current=null),n("disconnected"),E(null)}catch(e){console.error("Error stopping screen share:",e),i(`Failed to stop screen sharing: ${e.message}`)}},[p]),U=a.useCallback(async()=>{await $()},[$]);return a.useEffect(()=>()=>{r.current&&clearInterval(r.current),f.current&&clearInterval(f.current),h.current&&h.current.close(),p&&p.getTracks().forEach(e=>e.stop())},[p]),{connectionState:g,remoteStream:S,localStream:p,error:C,peerConnections:I,startScreenShare:M,stopScreenShare:$,connectToHost:A,disconnect:U}}export{W as V,z as u};
//# sourceMappingURL=useWebRTC-Bws32FEu.js.map
