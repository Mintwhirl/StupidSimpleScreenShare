{"version":3,"file":"ViewerView-CZAULitW.js","sources":["../../src/utils/validation.js","../../src/components/ViewerView.jsx"],"sourcesContent":["/**\r\n * Client-side validation utilities\r\n * Shared validation logic between client and server\r\n */\r\n\r\n/**\r\n * Validate room ID format\r\n * @param {string} roomId - Room ID to validate\r\n * @returns {object} Validation result\r\n */\r\nexport const validateRoomId = (roomId) => {\r\n  if (!roomId || typeof roomId !== 'string') {\r\n    return { valid: false, error: 'Room ID is required' };\r\n  }\r\n\r\n  const trimmed = roomId.trim();\r\n  if (trimmed.length === 0) {\r\n    return { valid: false, error: 'Room ID cannot be empty' };\r\n  }\r\n\r\n  // Check if it's a valid 24-character hex string\r\n  const hexPattern = /^[a-f0-9]{24}$/i;\r\n  if (!hexPattern.test(trimmed)) {\r\n    return { valid: false, error: 'Room ID must be exactly 24 characters and contain only letters and numbers' };\r\n  }\r\n\r\n  return { valid: true };\r\n};\r\n\r\n/**\r\n * Validate viewer ID format\r\n * @param {string} viewerId - Viewer ID to validate\r\n * @returns {object} Validation result\r\n */\r\nexport const validateViewerId = (viewerId) => {\r\n  if (!viewerId || typeof viewerId !== 'string') {\r\n    return { valid: false, error: 'Viewer ID is required' };\r\n  }\r\n\r\n  const trimmed = viewerId.trim();\r\n  if (trimmed.length === 0) {\r\n    return { valid: false, error: 'Viewer ID cannot be empty' };\r\n  }\r\n\r\n  if (trimmed.length < 3) {\r\n    return { valid: false, error: 'Viewer ID must be at least 3 characters long' };\r\n  }\r\n\r\n  if (trimmed.length > 50) {\r\n    return { valid: false, error: 'Viewer ID must be 50 characters or less' };\r\n  }\r\n\r\n  // Allow alphanumeric characters, spaces, hyphens, and underscores\r\n  const validPattern = /^[a-zA-Z0-9\\s\\-_]+$/;\r\n  if (!validPattern.test(trimmed)) {\r\n    return { valid: false, error: 'Viewer ID can only contain letters, numbers, spaces, hyphens, and underscores' };\r\n  }\r\n\r\n  return { valid: true };\r\n};\r\n\r\n/**\r\n * Validate chat message\r\n * @param {string} message - Message to validate\r\n * @returns {object} Validation result\r\n */\r\nexport const validateMessage = (message) => {\r\n  if (!message || typeof message !== 'string') {\r\n    return { valid: false, error: 'Message is required' };\r\n  }\r\n\r\n  const trimmed = message.trim();\r\n  if (trimmed.length === 0) {\r\n    return { valid: false, error: 'Message cannot be empty' };\r\n  }\r\n\r\n  if (trimmed.length > 500) {\r\n    return { valid: false, error: 'Message must be 500 characters or less' };\r\n  }\r\n\r\n  return { valid: true };\r\n};\r\n","import { useState, useEffect, useRef, useCallback } from 'react';\nimport VideoPlayer from './VideoPlayer';\nimport { useWebRTC } from '../hooks/useWebRTC';\nimport { useRoomContext } from '../contexts/RoomContext';\nimport { validateRoomId, validateViewerId } from '../utils/validation';\n\nfunction ViewerView({ config, onGoHome }) {\n  const { roomId, viewerId, updateViewerId } = useRoomContext();\n  const [error, setError] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [hostStatus, setHostStatus] = useState('unknown');\n  const [roomIdError, setRoomIdError] = useState(null);\n  const [viewerIdError, setViewerIdError] = useState(null);\n\n  const remoteVideoRef = useRef(null);\n\n  // Validation functions\n  const validateRoomIdInput = useCallback((value) => {\n    const validation = validateRoomId(value);\n    setRoomIdError(validation.valid ? null : validation.error);\n    return validation.valid;\n  }, []);\n\n  const validateViewerIdInput = useCallback((value) => {\n    const validation = validateViewerId(value);\n    setViewerIdError(validation.valid ? null : validation.error);\n    return validation.valid;\n  }, []);\n\n  const {\n    connectToHost,\n    disconnect,\n    connectionState,\n    remoteStream,\n    error: webrtcError,\n  } = useWebRTC(roomId, 'viewer', config, viewerId);\n\n  // Derive connection status from WebRTC state\n  const connectionStatus = connectionState;\n  const isConnected = connectionState === 'connected';\n\n  // Handle remote stream\n  useEffect(() => {\n    if (remoteStream && remoteVideoRef.current) {\n      remoteVideoRef.current.srcObject = remoteStream;\n    }\n  }, [remoteStream]);\n\n  // Handle WebRTC errors and clear errors on success\n  useEffect(() => {\n    if (webrtcError) {\n      setError(webrtcError);\n      setIsConnecting(false);\n      setHostStatus('disconnected');\n    } else if (connectionState === 'connected') {\n      // Clear errors when connection succeeds\n      setError(null);\n      setIsConnecting(false);\n      setHostStatus('connected');\n    } else if (connectionState === 'connecting') {\n      setHostStatus('connecting');\n    } else if (connectionState === 'disconnected' || connectionState === 'failed') {\n      setHostStatus('disconnected');\n    }\n  }, [webrtcError, connectionState]);\n\n  // Validate room exists\n  const validateRoom = useCallback(async (roomId) => {\n    try {\n      const response = await fetch(`/api/diagnostics?roomId=${roomId}`);\n      if (response.ok) {\n        const data = await response.json();\n        return data.room?.exists === true;\n      }\n      return false;\n    } catch (err) {\n      console.error('Error validating room:', err);\n      return false;\n    }\n  }, []);\n\n  // Handle connection to host\n  const handleConnect = useCallback(async () => {\n    // Clear previous errors\n    setError(null);\n    setRoomIdError(null);\n    setViewerIdError(null);\n\n    // Validate inputs\n    const isRoomIdValid = validateRoomIdInput(roomId);\n    const isViewerIdValid = validateViewerIdInput(viewerId);\n\n    if (!isRoomIdValid || !isViewerIdValid) {\n      return; // Validation errors are already set by validation functions\n    }\n\n    try {\n      setError(null);\n      setIsConnecting(true);\n      setHostStatus('connecting');\n\n      // Validate room exists first\n      const roomExists = await validateRoom(roomId);\n      if (!roomExists) {\n        setError('Room not found. Please check the room ID and make sure the host has started sharing.');\n        setHostStatus('disconnected');\n        return;\n      }\n\n      await connectToHost();\n\n      // Register sender ID for chat if viewerId is provided\n      if (viewerId && viewerId.trim()) {\n        try {\n          await fetch('/api/register-sender', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ roomId, senderId: viewerId.trim() }),\n          });\n        } catch (err) {\n          console.warn('Failed to register sender ID:', err);\n        }\n      }\n\n      // Don't set hostStatus to 'connected' here - let the WebRTC connection state handle it\n    } catch (err) {\n      console.error('Error connecting to host:', err);\n      setError('Failed to connect to host. Please check the room ID and try again.');\n      setHostStatus('disconnected');\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [roomId, connectToHost, validateRoom, viewerId, validateRoomIdInput, validateViewerIdInput]);\n\n  // Removed auto-connect logic - user must manually click \"Connect to Host\"\n\n  // Handle disconnection\n  const handleDisconnect = async () => {\n    try {\n      await disconnect();\n      setHostStatus('disconnected');\n      if (remoteVideoRef.current) {\n        remoteVideoRef.current.srcObject = null;\n      }\n    } catch (err) {\n      console.error('Error disconnecting:', err);\n    }\n  };\n\n  // Handle reconnection\n  const handleReconnect = () => {\n    handleDisconnect().then(() => {\n      setTimeout(handleConnect, 1000);\n    });\n  };\n\n  // Generate viewer ID if not provided\n  const generateViewerId = () => {\n    const id = `viewer_${Math.random().toString(36).substring(2, 8)}`;\n    updateViewerId(id);\n    return id;\n  };\n\n  // Get connection status color\n  const getStatusColor = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return 'text-green-600';\n      case 'connecting':\n        return 'text-yellow-600';\n      case 'disconnected':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  // Get connection status text\n  const getStatusText = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return 'Connected';\n      case 'connecting':\n        return 'Connecting...';\n      case 'disconnected':\n        return 'Disconnected';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  // Get host status color\n  const getHostStatusColor = () => {\n    switch (hostStatus) {\n      case 'connected':\n        return 'text-green-600';\n      case 'connecting':\n        return 'text-yellow-600';\n      case 'disconnected':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  // Get host status text\n  const getHostStatusText = () => {\n    switch (hostStatus) {\n      case 'connected':\n        return 'Host Online';\n      case 'connecting':\n        return 'Connecting to Host...';\n      case 'disconnected':\n        return 'Host Offline';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div className='bg-white rounded-lg shadow-md p-6'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <h2 className='text-2xl font-bold text-gray-900 mb-2'>👀 Viewing Room</h2>\n            <p className='text-gray-600'>\n              Connected to room: <span className='font-mono font-medium'>{roomId}</span>\n            </p>\n          </div>\n          <div className='text-right'>\n            <div className={`text-sm font-medium ${getStatusColor()}`}>Connection: {getStatusText()}</div>\n            <div className={`text-sm font-medium ${getHostStatusColor()}`}>{getHostStatusText()}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Viewer ID Section */}\n      <div className='bg-white rounded-lg shadow-md p-6'>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Your Viewer ID</h3>\n        <div className='flex items-center space-x-4'>\n          <div className='flex-1'>\n            <input\n              type='text'\n              value={viewerId || ''}\n              onChange={(e) => {\n                updateViewerId(e.target.value);\n                // Real-time validation\n                if (e.target.value.trim()) {\n                  validateViewerIdInput(e.target.value);\n                } else {\n                  setViewerIdError(null);\n                }\n              }}\n              placeholder='Enter your name or leave blank for auto-generated ID'\n              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 ${\n                viewerIdError \n                  ? 'border-red-500 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-blue-500'\n              }`}\n            />\n            {viewerIdError && (\n              <p className='text-red-500 text-sm mt-1'>{viewerIdError}</p>\n            )}\n          </div>\n          <button\n            onClick={generateViewerId}\n            className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\n          >\n            Generate ID\n          </button>\n        </div>\n        <p className='text-sm text-gray-500 mt-2'>This ID helps identify you in the chat and diagnostics.</p>\n      </div>\n\n      {/* Connection Controls */}\n      <div className='bg-white rounded-lg shadow-md p-6'>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Connection Controls</h3>\n        <div className='flex items-center justify-center space-x-4'>\n          {!isConnected ? (\n            <button\n              onClick={handleConnect}\n              disabled={isConnecting}\n              className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n                isConnecting\n                  ? 'bg-gray-400 text-white cursor-not-allowed'\n                  : 'bg-green-600 text-white hover:bg-green-700'\n              }`}\n            >\n              {isConnecting ? 'Connecting...' : 'Connect to Host'}\n            </button>\n          ) : (\n            <div className='flex items-center space-x-4'>\n              <button\n                onClick={handleReconnect}\n                className='px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors'\n              >\n                Reconnect\n              </button>\n              <button\n                onClick={handleDisconnect}\n                className='px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors'\n              >\n                Disconnect\n              </button>\n            </div>\n          )}\n        </div>\n\n        {isConnected && (\n          <div className='mt-4 text-center'>\n            <div className='flex items-center justify-center space-x-2 text-green-600'>\n              <div className='w-2 h-2 bg-green-600 rounded-full animate-pulse'></div>\n              <span className='text-sm font-medium'>Connected to Host</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className='bg-red-50 border border-red-200 rounded-lg p-4'>\n          <div className='flex items-center'>\n            <div className='text-red-600 mr-2'>⚠️</div>\n            <div>\n              <h4 className='text-red-800 font-medium'>Connection Error</h4>\n              <p className='text-red-700 text-sm mt-1'>{error}</p>\n            </div>\n          </div>\n          <div className='mt-3'>\n            <button\n              onClick={handleReconnect}\n              className='text-sm bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 transition-colors'\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Remote Video Display */}\n      {isConnected && (\n        <div className='bg-white rounded-lg shadow-md p-6'>\n          <h3 className='text-lg font-semibold text-gray-900 mb-4'>Host's Screen</h3>\n          <div className='relative'>\n            <VideoPlayer\n              ref={remoteVideoRef}\n              className='w-full max-w-4xl mx-auto rounded-lg border border-gray-200 bg-black'\n              autoPlay\n              playsInline\n            />\n            {!remoteStream && (\n              <div className='absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg'>\n                <div className='text-center'>\n                  <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'></div>\n                  <p className='text-gray-600'>Waiting for host to start sharing...</p>\n                </div>\n              </div>\n            )}\n            {remoteStream && (\n              <div className='absolute top-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs'>\n                Live\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Waiting State */}\n      {!isConnected && !isConnecting && (\n        <div className='bg-white rounded-lg shadow-md p-6'>\n          <div className='text-center py-12'>\n            <div className='text-6xl mb-4'>📺</div>\n            <h3 className='text-xl font-semibold text-gray-900 mb-2'>Ready to View</h3>\n            <p className='text-gray-600 mb-6'>\n              Use the \"Connect to Host\" button above to start viewing the shared screen.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className='bg-blue-50 border border-blue-200 rounded-lg p-6'>\n        <h3 className='text-lg font-semibold text-blue-900 mb-4'>📋 Instructions</h3>\n        <div className='space-y-2 text-sm text-blue-800'>\n          <p>• Make sure the host has started sharing their screen</p>\n          <p>• Click \"Connect to Host\" to join the viewing session</p>\n          <p>• Use the Chat feature to communicate with the host</p>\n          <p>• The screen will appear automatically when the host starts sharing</p>\n          <p>• Click \"Disconnect\" when you're done viewing</p>\n        </div>\n      </div>\n\n      {/* Actions */}\n      <div className='flex justify-center space-x-4'>\n        <button\n          onClick={onGoHome}\n          className='px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors'\n        >\n          Back to Home\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ViewerView;\n"],"names":["validateRoomId","roomId","trimmed","validateViewerId","viewerId","ViewerView","config","onGoHome","updateViewerId","useRoomContext","error","setError","useState","isConnecting","setIsConnecting","hostStatus","setHostStatus","roomIdError","setRoomIdError","viewerIdError","setViewerIdError","remoteVideoRef","useRef","validateRoomIdInput","useCallback","value","validation","validateViewerIdInput","connectToHost","disconnect","connectionState","remoteStream","webrtcError","useWebRTC","connectionStatus","isConnected","useEffect","validateRoom","response","err","handleConnect","isRoomIdValid","isViewerIdValid","handleDisconnect","handleReconnect","generateViewerId","id","getStatusColor","getStatusText","getHostStatusColor","getHostStatusText","jsxs","jsx","e","VideoPlayer"],"mappings":"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"}