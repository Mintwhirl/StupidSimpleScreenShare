import{r as n,j as W}from"./main-CjCzK5oF.js";const q=n.forwardRef(({className:c,...d},u)=>{const E=n.useRef(null),m=u||E;return n.useImperativeHandle(u,()=>E.current,[]),n.useEffect(()=>{const r=m.current;if(!r)return;const I=()=>{console.log("Video metadata loaded:",{duration:r.duration,videoWidth:r.videoWidth,videoHeight:r.videoHeight})},S=()=>{console.log("Video data loaded")},h=()=>{console.log("Video can start playing")},C=()=>{console.log("Video started playing")},k=()=>{console.log("Video paused")},l=()=>{console.log("Video ended")},L=P=>{console.error("Video error:",P)},b=()=>{console.log("Video waiting for data")},R=()=>{console.log("Video stalled")};return r.addEventListener("loadedmetadata",I),r.addEventListener("loadeddata",S),r.addEventListener("canplay",h),r.addEventListener("play",C),r.addEventListener("pause",k),r.addEventListener("ended",l),r.addEventListener("error",L),r.addEventListener("waiting",b),r.addEventListener("stalled",R),()=>{r.removeEventListener("loadedmetadata",I),r.removeEventListener("loadeddata",S),r.removeEventListener("canplay",h),r.removeEventListener("play",C),r.removeEventListener("pause",k),r.removeEventListener("ended",l),r.removeEventListener("error",L),r.removeEventListener("waiting",b),r.removeEventListener("stalled",R)}},[m]),W.jsx("video",{ref:m,className:c,"aria-label":"Screen sharing video stream",...d})});q.displayName="VideoPlayer";var M={};const z=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"}],U=[{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"},...M.TURN_SERVERS?JSON.parse(M.TURN_SERVERS):[]];function B(c=!1){const d=[...z];return c&&U.length>0&&d.push(...U),d}function K(c,d,u,E=null){const[m,r]=n.useState("disconnected"),[I,S]=n.useState(null),[h,C]=n.useState(null),[k,l]=n.useState(null),[L,b]=n.useState({}),[R,P]=n.useState([]),v=n.useRef(null),A=n.useRef(null),a=n.useRef(null),o=n.useRef(null),f=n.useRef(null),w=n.useRef(!0);n.useEffect(()=>{const e=B(u?.useTurn!==!1);P(e)},[u]);const j=n.useCallback(async e=>{if(!(!c||!d))try{const t=await fetch("/api/candidate",{method:"POST",headers:{"Content-Type":"application/json",...u?.authSecret&&{"x-auth-secret":u.authSecret}},body:JSON.stringify({roomId:c,role:d,viewerId:E,candidate:{candidate:e.candidate,sdpMid:e.sdpMid,sdpMLineIndex:e.sdpMLineIndex}})});if(!t.ok)throw new Error(`Failed to send ICE candidate: ${t.status}`)}catch(t){console.error("Error sending ICE candidate:",t),l(`Failed to send ICE candidate: ${t.message}`)}},[c,d,u,E]),T=n.useCallback(()=>{const e=new RTCPeerConnection({iceServers:R});return e.onicecandidate=t=>{t.candidate&&j(t.candidate)},e.onconnectionstatechange=()=>{console.log("Connection state changed:",e.connectionState),r(e.connectionState),(e.connectionState==="connected"||e.connectionState==="failed")&&(a.current&&(clearInterval(a.current),a.current=null),o.current&&(clearInterval(o.current),o.current=null),f.current&&(clearInterval(f.current),f.current=null))},e.oniceconnectionstatechange=()=>{console.log("ICE connection state changed:",e.iceConnectionState)},e.ontrack=t=>{console.log("Received remote stream:",t.streams[0]),S(t.streams[0])},e.ondatachannel=t=>{const i=t.channel;A.current=i,i.onopen=()=>{console.log("Data channel opened")},i.onmessage=p=>{console.log("Received data channel message:",p.data)}},e},[R,j]),x=n.useCallback(async e=>{if(c)try{const t=await fetch("/api/offer",{method:"POST",headers:{"Content-Type":"application/json",...u?.authSecret&&{"x-auth-secret":u.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!t.ok)throw new Error(`Failed to send offer: ${t.status}`)}catch(t){console.error("Error sending offer:",t),l(`Failed to send offer: ${t.message}`)}},[c,u]),F=n.useCallback(async e=>{if(c)try{const t=await fetch("/api/answer",{method:"POST",headers:{"Content-Type":"application/json",...u?.authSecret&&{"x-auth-secret":u.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!t.ok)throw new Error(`Failed to send answer: ${t.status}`)}catch(t){console.error("Error sending answer:",t),l(`Failed to send answer: ${t.message}`)}},[c,u]),N=n.useCallback(async()=>{a.current&&clearInterval(a.current);let e=0,t=1e3;const i=60,p=async()=>{try{if(e++,e>i){clearInterval(a.current),a.current=null,w.current&&(l("Connection timeout: No offer received from host. Make sure the host has started sharing."),r("failed"));return}const s=await fetch(`/api/offer?roomId=${c}`);if(s.ok){const y=await s.json();if(y.desc){clearInterval(a.current),a.current=null;const g=T();v.current=g,await g.setRemoteDescription(y.desc);const D=await g.createAnswer();await g.setLocalDescription(D),await F(D),$()}}else s.status===404?e>10&&(clearInterval(a.current),t=5e3,a.current=setInterval(p,t)):(console.error("Unexpected error polling for offers:",s.status),clearInterval(a.current),a.current=null,w.current&&(l(`Server error: ${s.status}`),r("failed")))}catch(s){console.error("Error polling for offers:",s),clearInterval(a.current),a.current=null,w.current&&(l(`Network error: ${s.message}`),r("failed"))}};a.current=setInterval(p,t)},[c,F,T,$]),O=n.useCallback(async()=>{o.current&&clearInterval(o.current);let e=0,t=1e3;const i=60,p=async()=>{try{if(e++,e>i){clearInterval(o.current),o.current=null,w.current&&(l("Connection timeout: No answer received from viewer. Make sure the viewer has connected."),r("failed"));return}const s=await fetch(`/api/answer?roomId=${c}`);if(s.ok){const y=await s.json();if(y.desc){clearInterval(o.current),o.current=null;const g=v.current;g&&await g.setRemoteDescription(y.desc)}}else s.status===404?e>10&&(clearInterval(o.current),t=5e3,o.current=setInterval(p,t)):(console.error("Unexpected error polling for answers:",s.status),clearInterval(o.current),o.current=null,w.current&&(l(`Server error: ${s.status}`),r("failed")))}catch(s){console.error("Error polling for answers:",s),clearInterval(o.current),o.current=null,w.current&&(l(`Network error: ${s.message}`),r("failed"))}};o.current=setInterval(p,t)},[c]),$=n.useCallback(async()=>{f.current&&clearInterval(f.current);let e=0;const t=120;f.current=setInterval(async()=>{try{if(e++,e>t){clearInterval(f.current),f.current=null,console.warn("ICE candidate polling timeout - connection may be stuck");return}const i=await fetch(`/api/candidate?roomId=${c}&role=${d}${E?`&viewerId=${E}`:""}`);if(i.ok){const p=await i.json();if(p.candidates&&p.candidates.length>0){const s=v.current;if(s)for(const y of p.candidates)try{await s.addIceCandidate(y)}catch(g){console.warn("Failed to add ICE candidate:",g)}}}else i.status!==404&&console.error("Error polling for ICE candidates:",i.status)}catch(i){console.error("Error polling for ICE candidates:",i)}},1e3)},[c,d,E]),_=n.useCallback(async()=>{if(d!=="host")throw new Error("Only hosts can start screen sharing");try{l(null),r("connecting");const e=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0});C(e);const t=T();v.current=t,e.getTracks().forEach(p=>{t.addTrack(p,e)});const i=await t.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return await t.setLocalDescription(i),await x(i),O(),$(),e}catch(e){throw console.error("Error starting screen share:",e),l(`Failed to start screen sharing: ${e.message}`),r("disconnected"),e}},[d,T,x,O,$]),H=n.useCallback(async()=>{if(d!=="viewer")throw new Error("Only viewers can connect to host");try{l(null),r("connecting"),N()}catch(e){throw console.error("Error connecting to host:",e),l(`Failed to connect to host: ${e.message}`),r("disconnected"),e}},[d,N]),V=n.useCallback(async()=>{try{h&&(h.getTracks().forEach(e=>e.stop()),C(null)),v.current&&(v.current.close(),v.current=null),a.current&&(clearInterval(a.current),a.current=null),o.current&&(clearInterval(o.current),o.current=null),f.current&&(clearInterval(f.current),f.current=null),r("disconnected"),S(null)}catch(e){console.error("Error stopping screen share:",e),l(`Failed to stop screen sharing: ${e.message}`)}},[h]),J=n.useCallback(async()=>{await V()},[V]);return n.useEffect(()=>()=>{w.current=!1,a.current&&clearInterval(a.current),o.current&&clearInterval(o.current),f.current&&clearInterval(f.current),v.current&&v.current.close(),h&&h.getTracks().forEach(e=>e.stop())},[h]),{connectionState:m,remoteStream:I,localStream:h,error:k,peerConnections:L,startScreenShare:_,stopScreenShare:V,connectToHost:H,disconnect:J}}export{q as V,K as u};
//# sourceMappingURL=useWebRTC-DwbhVGax.js.map
