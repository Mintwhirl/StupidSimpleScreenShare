import{r as n,j as Y}from"./main-DvqmQTaq.js";const Z=n.forwardRef(({className:c,...a},o)=>{const p=n.useRef(null),I=o||p;return n.useImperativeHandle(o,()=>p.current,[]),n.useEffect(()=>{const r=I.current;if(!r)return;const O=()=>{console.log("Video metadata loaded:",{duration:r.duration,videoWidth:r.videoWidth,videoHeight:r.videoHeight})},g=()=>{console.log("Video data loaded")},h=()=>{console.log("Video can start playing")},w=()=>{console.log("Video started playing")},y=()=>{console.log("Video paused")},d=()=>{console.log("Video ended")},N=P=>{console.error("Video error:",P)},D=()=>{console.log("Video waiting for data")},R=()=>{console.log("Video stalled")};return r.addEventListener("loadedmetadata",O),r.addEventListener("loadeddata",g),r.addEventListener("canplay",h),r.addEventListener("play",w),r.addEventListener("pause",y),r.addEventListener("ended",d),r.addEventListener("error",N),r.addEventListener("waiting",D),r.addEventListener("stalled",R),()=>{r.removeEventListener("loadedmetadata",O),r.removeEventListener("loadeddata",g),r.removeEventListener("canplay",h),r.removeEventListener("play",w),r.removeEventListener("pause",y),r.removeEventListener("ended",d),r.removeEventListener("error",N),r.removeEventListener("waiting",D),r.removeEventListener("stalled",R)}},[I]),Y.jsx("video",{ref:I,className:c,"aria-label":"Screen sharing video stream",...a})});Z.displayName="VideoPlayer";var W={};const ee=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"}],M=[{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"},...W.TURN_SERVERS?JSON.parse(W.TURN_SERVERS):[]];function te(c=!1){const a=[...ee];return c&&M.length>0&&a.push(...M),a}const F=window.location.hostname==="localhost"||window.location.hostname.includes("localhost"),L={ERROR:0,WARN:1,INFO:2,DEBUG:3},A=F?L.DEBUG:L.ERROR;class f{static error(a,...o){A>=L.ERROR&&console.error(`[ERROR] ${a}`,...o)}static warn(a,...o){A>=L.WARN&&console.warn(`[WARN] ${a}`,...o)}static info(a,...o){A>=L.INFO&&console.info(`[INFO] ${a}`,...o)}static debug(a,...o){A>=L.DEBUG&&console.debug(`[DEBUG] ${a}`,...o)}static webrtc(a,o={}){F&&console.debug(`[WebRTC] ${a}`,o)}static api(a,o,p={}){F&&console.debug(`[API] ${a} ${o}`,p)}static user(a,o={}){F&&console.debug(`[USER] ${a}`,o)}}const se={DISCONNECTED:"disconnected",CONNECTING:"connecting",CONNECTED:"connected"},ce={ROOM_NOT_FOUND:"Room not found. Please check the room ID and make sure the host has started sharing.",CONNECTION_FAILED:"Failed to connect to host. Please check the room ID and try again.",SCREEN_SHARE_FAILED:"Failed to start screen sharing. Please check your browser permissions.",INVALID_ROOM_ID:"Room ID must be exactly 24 characters and contain only letters and numbers",INVALID_VIEWER_ID:"Viewer ID can only contain letters, numbers, spaces, hyphens, and underscores",CONNECTION_TIMEOUT:"Connection timeout. Please try again."},ie={CONNECT_TO_HOST:"Connect to Host",DISCONNECT:"Disconnect",RECONNECT:"Reconnect",CONNECTING:"Connecting...",CONNECTED:"Connected",DISCONNECTED:"Disconnected",HOST_ONLINE:"Host Online",HOST_OFFLINE:"Host Offline",CONNECTING_TO_HOST:"Connecting to Host...",UNKNOWN:"Unknown"},le={SUCCESS:"text-green-600",WARNING:"text-yellow-600",ERROR:"text-red-600",DEFAULT:"text-gray-600"},re={DEFAULT:1e3},de={CONFIG:"/api/config",CREATE_ROOM:"/api/create-room",OFFER:"/api/offer",ANSWER:"/api/answer",CANDIDATE:"/api/candidate",CHAT:"/api/chat",DIAGNOSTICS:"/api/diagnostics",VIEWERS:"/api/viewers",REGISTER_SENDER:"/api/register-sender"};function ne(c,a={}){const{initialInterval:o=re.DEFAULT,maxInterval:p=3e4,backoffFactor:I=1.5,maxPolls:r=60,backoffAfter:O=10}=a;return async()=>{let g=0,h=o;const w=async()=>{if(g++,g>r)throw new Error("Polling timeout reached");const y=await c();return y||(g>O&&(h=Math.min(h*I,p)),new Promise((d,N)=>{const D=setTimeout(async()=>{try{const R=await w();d(R)}catch(R){N(R)}},h);w.timeoutId=D}))};return w()}}function ue(c,a,o,p=null){const[I,r]=n.useState("disconnected"),[O,g]=n.useState(null),[h,w]=n.useState(null),[y,d]=n.useState(null),[N,D]=n.useState([]),[R,P]=n.useState(new Map),[B,ae]=n.useState(0),[J,q]=n.useState({type:null,code:null,message:null,details:null}),C=n.useRef(null),K=n.useRef(null),i=n.useRef(null),l=n.useRef(null),v=n.useRef(null),T=n.useRef(!0);n.useEffect(()=>{const e=te(o?.useTurn!==!1);D(e)},[o]);const $=n.useCallback((e,t,u,E=null)=>{q({type:e,code:t,message:u,details:E}),d(u),f.error(`WebRTC Error [${e}]: ${u}`,{code:t,details:E})},[]),V=n.useCallback(async e=>{if(!(!c||!a))try{const t=await fetch("/api/candidate",{method:"POST",headers:{"Content-Type":"application/json",...o?.authSecret&&{"x-auth-secret":o.authSecret}},body:JSON.stringify({roomId:c,role:a,viewerId:p,candidate:e})});if(!t.ok)throw new Error(`Failed to send ICE candidate: ${t.status}`)}catch(t){f.error("Error sending ICE candidate:",t),d(`Failed to send ICE candidate: ${t.message}`)}},[c,a,o,p]),k=n.useCallback(()=>{const e=new RTCPeerConnection({iceServers:N});return e.onicecandidate=t=>{t.candidate&&V(t.candidate)},e.onconnectionstatechange=()=>{f.webrtc("Connection state changed",{state:e.connectionState}),r(e.connectionState),(e.connectionState==="connected"||e.connectionState==="failed")&&(i.current&&(clearInterval(i.current),i.current=null),l.current&&(clearInterval(l.current),l.current=null),v.current&&(clearInterval(v.current),v.current=null))},e.oniceconnectionstatechange=()=>{f.webrtc("ICE connection state changed",{state:e.iceConnectionState})},e.ontrack=t=>{f.webrtc("Received remote stream",{stream:t.streams[0]}),g(t.streams[0])},e.ondatachannel=t=>{const u=t.channel;K.current=u,u.onopen=()=>{f.webrtc("Data channel opened")},u.onmessage=E=>{f.webrtc("Received data channel message",{data:E.data})}},e},[N,V]),U=n.useCallback(async e=>{if(c)try{const t=await fetch("/api/offer",{method:"POST",headers:{"Content-Type":"application/json",...o?.authSecret&&{"x-auth-secret":o.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!t.ok)throw new Error(`Failed to send offer: ${t.status}`)}catch(t){f.error("Error sending offer:",t),d(`Failed to send offer: ${t.message}`)}},[c,o]),x=n.useCallback(async e=>{if(c)try{const t=await fetch("/api/answer",{method:"POST",headers:{"Content-Type":"application/json",...o?.authSecret&&{"x-auth-secret":o.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!t.ok)throw new Error(`Failed to send answer: ${t.status}`)}catch(t){f.error("Error sending answer:",t),d(`Failed to send answer: ${t.message}`)}},[c,o]),j=n.useCallback(async()=>{i.current&&clearInterval(i.current);let e=0,t=1e3;const u=60,E=async()=>{try{if(e++,e>u){clearInterval(i.current),i.current=null,T.current&&(d("Connection timeout: No offer received from host. Make sure the host has started sharing."),r("failed"));return}const s=await fetch(`/api/offer?roomId=${c}`);if(s.ok){const S=await s.json();if(S.desc){clearInterval(i.current),i.current=null;const m=k();C.current=m,await m.setRemoteDescription(S.desc);const H=await m.createAnswer();await m.setLocalDescription(H),await x(H),b()}}else s.status===404?e>10&&(clearInterval(i.current),t=5e3,i.current=setInterval(E,t)):(f.error("Unexpected error polling for offers:",s.status),clearInterval(i.current),i.current=null,T.current&&(d(`Server error: ${s.status}`),r("failed")))}catch(s){f.error("Error polling for offers:",s),clearInterval(i.current),i.current=null,T.current&&(d(`Network error: ${s.message}`),r("failed"))}};i.current=setInterval(E,t)},[c,x,k,b]),G=n.useCallback(async()=>{l.current&&clearInterval(l.current);let e=0,t=1e3;const u=60,E=async()=>{try{if(e++,e>u){clearInterval(l.current),l.current=null,T.current&&(d("Connection timeout: No answer received from viewer. Make sure the viewer has connected."),r("failed"));return}const s=await fetch(`/api/answer?roomId=${c}`);if(s.ok){const S=await s.json();if(S.desc){clearInterval(l.current),l.current=null;const m=C.current;m&&await m.setRemoteDescription(S.desc)}}else s.status===404?e>10&&(clearInterval(l.current),t=5e3,l.current=setInterval(E,t)):(f.error("Unexpected error polling for answers:",s.status),clearInterval(l.current),l.current=null,T.current&&(d(`Server error: ${s.status}`),r("failed")))}catch(s){f.error("Error polling for answers:",s),clearInterval(l.current),l.current=null,T.current&&(d(`Network error: ${s.message}`),r("failed"))}};l.current=setInterval(E,t)},[c]),b=n.useCallback(async()=>{v.current&&clearInterval(v.current);const t=ne(async()=>{const u=await fetch(`/api/candidate?roomId=${c}&role=${a}${p?`&viewerId=${p}`:""}`);if(u.ok){const E=await u.json();if(E.candidates&&E.candidates.length>0){const s=C.current;if(s)for(const S of E.candidates)try{await s.addIceCandidate(S)}catch(m){f.warn("Failed to add ICE candidate:",m)}return!0}}else if(u.status!==404)throw f.error("Error polling for ICE candidates:",u.status),new Error(`HTTP ${u.status}`);return!1},{initialInterval:1e3,maxInterval:1e4,backoffFactor:1.5,maxPolls:120,backoffAfter:10});try{await t()}catch{f.warn("ICE candidate polling timeout - connection may be stuck")}},[c,a,p]),X=n.useCallback(async()=>{if(a!=="host")throw new Error("Only hosts can start screen sharing");try{d(null),r("connecting");const e=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0}),t=e.getVideoTracks(),u=e.getAudioTracks();if(t.length===0)throw $("permission","VIDEO_DENIED","Video permission is required to share your screen. Please allow video access and try again.","User denied video permission in getDisplayMedia"),new Error("Video permission denied - cannot share screen without video");u.length===0&&f.warn("Audio permission denied - screen sharing will be video-only"),w(e);const E=k();C.current=E,e.getTracks().forEach(S=>{E.addTransceiver(S,{streams:[e],direction:"sendonly"})});const s=await E.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return await E.setLocalDescription(s),await U(s),G(),b(),e}catch(e){throw f.error("Error starting screen share:",e),d(`Failed to start screen sharing: ${e.message}`),r("disconnected"),e}},[a,k,U,G,b,$]),z=n.useCallback(async()=>{if(a!=="viewer")throw new Error("Only viewers can connect to host");try{d(null),r("connecting"),j()}catch(e){throw f.error("Error connecting to host:",e),d(`Failed to connect to host: ${e.message}`),r("disconnected"),e}},[a,j]),_=n.useCallback(async()=>{try{h&&(h.getTracks().forEach(e=>e.stop()),w(null)),C.current&&(C.current.close(),C.current=null),i.current&&(clearInterval(i.current),i.current=null),l.current&&(clearInterval(l.current),l.current=null),v.current&&(clearInterval(v.current),v.current=null),r("disconnected"),g(null)}catch(e){f.error("Error stopping screen share:",e),d(`Failed to stop screen sharing: ${e.message}`)}},[h]),Q=n.useCallback(async()=>{await _()},[_]);return n.useEffect(()=>()=>{T.current=!1,i.current&&clearInterval(i.current),l.current&&clearInterval(l.current),v.current&&clearInterval(v.current),C.current&&C.current.close(),h&&h.getTracks().forEach(e=>e.stop())},[h]),{connectionState:I,remoteStream:O,localStream:h,error:y,errorState:J,peerConnections:R,viewerCount:B,startScreenShare:X,stopScreenShare:_,connectToHost:z,disconnect:Q}}export{de as A,se as C,ce as E,le as S,ie as U,Z as V,ue as u};
//# sourceMappingURL=useWebRTC-b01gGo0J.js.map
