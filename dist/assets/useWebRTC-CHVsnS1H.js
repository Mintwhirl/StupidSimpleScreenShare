import{r as a,j as U}from"./main-n58yuKhJ.js";const W=a.forwardRef(({className:o,...c},d)=>{const b=a.useRef(null),v=d||b;return a.useEffect(()=>{const n=v.current;if(!n)return;const m=()=>{console.log("Video metadata loaded:",{duration:n.duration,videoWidth:n.videoWidth,videoHeight:n.videoHeight})},g=()=>{console.log("Video data loaded")},p=()=>{console.log("Video can start playing")},E=()=>{console.log("Video started playing")},S=()=>{console.log("Video paused")},l=()=>{console.log("Video ended")},C=k=>{console.error("Video error:",k)},L=()=>{console.log("Video waiting for data")},w=()=>{console.log("Video stalled")};return n.addEventListener("loadedmetadata",m),n.addEventListener("loadeddata",g),n.addEventListener("canplay",p),n.addEventListener("play",E),n.addEventListener("pause",S),n.addEventListener("ended",l),n.addEventListener("error",C),n.addEventListener("waiting",L),n.addEventListener("stalled",w),()=>{n.removeEventListener("loadedmetadata",m),n.removeEventListener("loadeddata",g),n.removeEventListener("canplay",p),n.removeEventListener("play",E),n.removeEventListener("pause",S),n.removeEventListener("ended",l),n.removeEventListener("error",C),n.removeEventListener("waiting",L),n.removeEventListener("stalled",w)}},[v]),U.jsx("video",{ref:v,className:o,...c})});W.displayName="VideoPlayer";const H=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"}],D=[{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"}];function J(o=!1){const c=[...H];return o&&D.length>0&&c.push(...D),c}function z(o,c,d,b=null){const[v,n]=a.useState("disconnected"),[m,g]=a.useState(null),[p,E]=a.useState(null),[S,l]=a.useState(null),[C,L]=a.useState({}),[w,k]=a.useState([]),h=a.useRef(null),N=a.useRef(null),r=a.useRef(null),f=a.useRef(null);a.useEffect(()=>{const e=J(d?.useTurn!==!1);k(e)},[d]);const j=a.useCallback(async e=>{if(!(!o||!c))try{const t=await fetch("/api/candidate",{method:"POST",headers:{"Content-Type":"application/json",...d?.authSecret&&{"x-auth-secret":d.authSecret}},body:JSON.stringify({roomId:o,role:c,candidate:{candidate:e.candidate,sdpMid:e.sdpMid,sdpMLineIndex:e.sdpMLineIndex}})});if(!t.ok)throw new Error(`Failed to send ICE candidate: ${t.status}`)}catch(t){console.error("Error sending ICE candidate:",t),l(`Failed to send ICE candidate: ${t.message}`)}},[o,c,d]),I=a.useCallback(()=>{const e=new RTCPeerConnection({iceServers:w});return e.onicecandidate=t=>{t.candidate&&j(t.candidate)},e.onconnectionstatechange=()=>{console.log("Connection state changed:",e.connectionState),n(e.connectionState),(e.connectionState==="connected"||e.connectionState==="failed")&&(r.current&&(clearInterval(r.current),r.current=null),f.current&&(clearInterval(f.current),f.current=null))},e.oniceconnectionstatechange=()=>{console.log("ICE connection state changed:",e.iceConnectionState)},e.ontrack=t=>{console.log("Received remote stream:",t.streams[0]),g(t.streams[0])},e.ondatachannel=t=>{const i=t.channel;N.current=i,i.onopen=()=>{console.log("Data channel opened")},i.onmessage=s=>{console.log("Received data channel message:",s.data)}},e},[w,j]),P=a.useCallback(async e=>{if(o)try{const t=await fetch("/api/offer",{method:"POST",headers:{"Content-Type":"application/json",...d?.authSecret&&{"x-auth-secret":d.authSecret}},body:JSON.stringify({roomId:o,desc:e})});if(!t.ok)throw new Error(`Failed to send offer: ${t.status}`)}catch(t){console.error("Error sending offer:",t),l(`Failed to send offer: ${t.message}`)}},[o,d]),V=a.useCallback(async e=>{if(o)try{const t=await fetch("/api/answer",{method:"POST",headers:{"Content-Type":"application/json",...d?.authSecret&&{"x-auth-secret":d.authSecret}},body:JSON.stringify({roomId:o,desc:e})});if(!t.ok)throw new Error(`Failed to send answer: ${t.status}`)}catch(t){console.error("Error sending answer:",t),l(`Failed to send answer: ${t.message}`)}},[o,d]),$=a.useCallback(async()=>{r.current&&clearInterval(r.current);let e=0,t=1e3;const i=60,s=async()=>{try{if(e++,e>i){clearInterval(r.current),r.current=null,l("Connection timeout: No offer received from host. Make sure the host has started sharing."),n("failed");return}const u=await fetch(`/api/offer?roomId=${o}`);if(u.ok){const y=await u.json();if(y.desc){clearInterval(r.current),r.current=null;const R=h.current;if(R){await R.setRemoteDescription(y.desc);const O=await R.createAnswer();await R.setLocalDescription(O),await V(O)}}}else u.status===404?e>10&&(clearInterval(r.current),t=5e3,r.current=setInterval(s,t)):(console.error("Unexpected error polling for offers:",u.status),clearInterval(r.current),r.current=null,l(`Server error: ${u.status}`),n("failed"))}catch(u){console.error("Error polling for offers:",u),clearInterval(r.current),r.current=null,l(`Network error: ${u.message}`),n("failed")}};r.current=setInterval(s,t)},[o,V]),x=a.useCallback(async()=>{r.current&&clearInterval(r.current);let e=0,t=1e3;const i=async()=>{try{const s=await fetch(`/api/answer?roomId=${o}`);if(s.ok){const u=await s.json();if(u.desc){clearInterval(r.current),r.current=null;const y=h.current;y&&await y.setRemoteDescription(u.desc)}}else s.status===404?(e++,e>10&&(clearInterval(r.current),t=5e3,r.current=setInterval(i,t))):console.error("Unexpected error polling for answers:",s.status)}catch(s){console.error("Error polling for answers:",s)}};r.current=setInterval(i,t)},[o]),F=a.useCallback(async()=>{f.current&&clearInterval(f.current),f.current=setInterval(async()=>{try{const e=await fetch(`/api/candidate?roomId=${o}&role=${c}`);if(e.ok){const t=await e.json();if(t.candidates&&t.candidates.length>0){const i=h.current;if(i)for(const s of t.candidates)try{await i.addIceCandidate(s)}catch(u){console.warn("Failed to add ICE candidate:",u)}}}else e.status!==404&&console.error("Error polling for ICE candidates:",e.status)}catch(e){console.error("Error polling for ICE candidates:",e)}},1e3)},[o,c]),M=a.useCallback(async()=>{if(c!=="host")throw new Error("Only hosts can start screen sharing");try{l(null),n("connecting");const e=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0});E(e);const t=I();h.current=t,e.getTracks().forEach(s=>{t.addTrack(s,e)});const i=await t.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return await t.setLocalDescription(i),await P(i),x(),e}catch(e){throw console.error("Error starting screen share:",e),l(`Failed to start screen sharing: ${e.message}`),n("disconnected"),e}},[c,I,P,x]),A=a.useCallback(async()=>{if(c!=="viewer")throw new Error("Only viewers can connect to host");try{l(null),n("connecting");const e=I();h.current=e,$(),F()}catch(e){throw console.error("Error connecting to host:",e),l(`Failed to connect to host: ${e.message}`),n("disconnected"),e}},[c,I,F,$]),T=a.useCallback(async()=>{try{p&&(p.getTracks().forEach(e=>e.stop()),E(null)),h.current&&(h.current.close(),h.current=null),r.current&&(clearInterval(r.current),r.current=null),f.current&&(clearInterval(f.current),f.current=null),n("disconnected"),g(null)}catch(e){console.error("Error stopping screen share:",e),l(`Failed to stop screen sharing: ${e.message}`)}},[p]),_=a.useCallback(async()=>{await T()},[T]);return a.useEffect(()=>()=>{r.current&&clearInterval(r.current),f.current&&clearInterval(f.current),h.current&&h.current.close(),p&&p.getTracks().forEach(e=>e.stop())},[p]),{connectionState:v,remoteStream:m,localStream:p,error:S,peerConnections:C,startScreenShare:M,stopScreenShare:T,connectToHost:A,disconnect:_}}export{W as V,z as u};
//# sourceMappingURL=useWebRTC-CHVsnS1H.js.map
