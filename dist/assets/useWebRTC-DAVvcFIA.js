import{r as o,j as J}from"./main-CHOg9Uja.js";const K=o.forwardRef(({className:c,...r},a)=>{const v=o.useRef(null),S=a||v;return o.useImperativeHandle(a,()=>v.current,[]),o.useEffect(()=>{const t=S.current;if(!t)return;const T=()=>{console.log("Video metadata loaded:",{duration:t.duration,videoWidth:t.videoWidth,videoHeight:t.videoHeight})},w=()=>{console.log("Video data loaded")},p=()=>{console.log("Video can start playing")},C=()=>{console.log("Video started playing")},I=()=>{console.log("Video paused")},d=()=>{console.log("Video ended")},N=F=>{console.error("Video error:",F)},O=()=>{console.log("Video waiting for data")},f=()=>{console.log("Video stalled")};return t.addEventListener("loadedmetadata",T),t.addEventListener("loadeddata",w),t.addEventListener("canplay",p),t.addEventListener("play",C),t.addEventListener("pause",I),t.addEventListener("ended",d),t.addEventListener("error",N),t.addEventListener("waiting",O),t.addEventListener("stalled",f),()=>{t.removeEventListener("loadedmetadata",T),t.removeEventListener("loadeddata",w),t.removeEventListener("canplay",p),t.removeEventListener("play",C),t.removeEventListener("pause",I),t.removeEventListener("ended",d),t.removeEventListener("error",N),t.removeEventListener("waiting",O),t.removeEventListener("stalled",f)}},[S]),J.jsx("video",{ref:S,className:c,"aria-label":"Screen sharing video stream",...r})});K.displayName="VideoPlayer";var H={};const X=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"}],G=[{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"},...H.TURN_SERVERS?JSON.parse(H.TURN_SERVERS):[]];function q(c=!1){const r=[...X];return c&&G.length>0&&r.push(...G),r}const A=window.location.hostname==="localhost"||window.location.hostname.includes("localhost"),L={ERROR:0,WARN:1,INFO:2,DEBUG:3},b=A?L.DEBUG:L.ERROR;class u{static error(r,...a){b>=L.ERROR&&console.error(`[ERROR] ${r}`,...a)}static warn(r,...a){b>=L.WARN&&console.warn(`[WARN] ${r}`,...a)}static info(r,...a){b>=L.INFO&&console.info(`[INFO] ${r}`,...a)}static debug(r,...a){b>=L.DEBUG&&console.debug(`[DEBUG] ${r}`,...a)}static webrtc(r,a={}){A&&console.debug(`[WebRTC] ${r}`,a)}static api(r,a,v={}){A&&console.debug(`[API] ${r} ${a}`,v)}static user(r,a={}){A&&console.debug(`[USER] ${r}`,a)}}const Z={DISCONNECTED:"disconnected",CONNECTING:"connecting",CONNECTED:"connected"},ee={ROOM_NOT_FOUND:"Room not found. Please check the room ID and make sure the host has started sharing.",CONNECTION_FAILED:"Failed to connect to host. Please check the room ID and try again.",SCREEN_SHARE_FAILED:"Failed to start screen sharing. Please check your browser permissions.",INVALID_ROOM_ID:"Room ID must be exactly 24 characters and contain only letters and numbers",INVALID_VIEWER_ID:"Viewer ID can only contain letters, numbers, spaces, hyphens, and underscores",CONNECTION_TIMEOUT:"Connection timeout. Please try again."},te={CONNECT_TO_HOST:"Connect to Host",DISCONNECT:"Disconnect",RECONNECT:"Reconnect",CONNECTING:"Connecting...",CONNECTED:"Connected",DISCONNECTED:"Disconnected",HOST_ONLINE:"Host Online",HOST_OFFLINE:"Host Offline",CONNECTING_TO_HOST:"Connecting to Host...",UNKNOWN:"Unknown"},ne={SUCCESS:"text-green-600",WARNING:"text-yellow-600",ERROR:"text-red-600",DEFAULT:"text-gray-600"},z={DEFAULT:1e3},re={CONFIG:"/api/config",CREATE_ROOM:"/api/create-room",OFFER:"/api/offer",ANSWER:"/api/answer",CANDIDATE:"/api/candidate",CHAT:"/api/chat",DIAGNOSTICS:"/api/diagnostics",VIEWERS:"/api/viewers",REGISTER_SENDER:"/api/register-sender"};function Q(c,r={}){const{initialInterval:a=z.DEFAULT,maxInterval:v=3e4,backoffFactor:S=1.5,maxPolls:t=60,backoffAfter:T=10}=r;return async()=>{let w=0,p=a;const C=async()=>{if(w++,w>t)throw new Error("Polling timeout reached");const I=await c();return I||(w>T&&(p=Math.min(p*S,v)),new Promise((d,N)=>{const O=setTimeout(async()=>{try{const f=await C();d(f)}catch(f){N(f)}},p);C.timeoutId=O}))};return C()}}function ae(c,r,a,v=null){const[S,t]=o.useState("disconnected"),[T,w]=o.useState(null),[p,C]=o.useState(null),[I,d]=o.useState(null),[N,O]=o.useState([]),f=o.useRef(null),F=o.useRef(null),l=o.useRef(null),i=o.useRef(null),g=o.useRef(null),y=o.useRef(!0);o.useEffect(()=>{const e=q(a?.useTurn!==!1);O(e)},[a]);const _=o.useCallback(async e=>{if(!(!c||!r))try{const n=await fetch("/api/candidate",{method:"POST",headers:{"Content-Type":"application/json",...a?.authSecret&&{"x-auth-secret":a.authSecret}},body:JSON.stringify({roomId:c,role:r,viewerId:v,candidate:e})});if(!n.ok)throw new Error(`Failed to send ICE candidate: ${n.status}`)}catch(n){u.error("Error sending ICE candidate:",n),d(`Failed to send ICE candidate: ${n.message}`)}},[c,r,a,v]),D=o.useCallback(()=>{const e=new RTCPeerConnection({iceServers:N});return e.onicecandidate=n=>{n.candidate&&_(n.candidate)},e.onconnectionstatechange=()=>{u.webrtc("Connection state changed",{state:e.connectionState}),t(e.connectionState),(e.connectionState==="connected"||e.connectionState==="failed")&&(l.current&&(clearInterval(l.current),l.current=null),i.current&&(clearInterval(i.current),i.current=null),g.current&&(clearInterval(g.current),g.current=null))},e.oniceconnectionstatechange=()=>{u.webrtc("ICE connection state changed",{state:e.iceConnectionState})},e.ontrack=n=>{u.webrtc("Received remote stream",{stream:n.streams[0]}),w(n.streams[0])},e.ondatachannel=n=>{const E=n.channel;F.current=E,E.onopen=()=>{u.webrtc("Data channel opened")},E.onmessage=h=>{u.webrtc("Received data channel message",{data:h.data})}},e},[N,_]),$=o.useCallback(async e=>{if(c)try{const n=await fetch("/api/offer",{method:"POST",headers:{"Content-Type":"application/json",...a?.authSecret&&{"x-auth-secret":a.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!n.ok)throw new Error(`Failed to send offer: ${n.status}`)}catch(n){u.error("Error sending offer:",n),d(`Failed to send offer: ${n.message}`)}},[c,a]),V=o.useCallback(async e=>{if(c)try{const n=await fetch("/api/answer",{method:"POST",headers:{"Content-Type":"application/json",...a?.authSecret&&{"x-auth-secret":a.authSecret}},body:JSON.stringify({roomId:c,desc:e})});if(!n.ok)throw new Error(`Failed to send answer: ${n.status}`)}catch(n){u.error("Error sending answer:",n),d(`Failed to send answer: ${n.message}`)}},[c,a]),x=o.useCallback(async()=>{l.current&&clearInterval(l.current);let e=0,n=1e3;const E=60,h=async()=>{try{if(e++,e>E){clearInterval(l.current),l.current=null,y.current&&(d("Connection timeout: No offer received from host. Make sure the host has started sharing."),t("failed"));return}const s=await fetch(`/api/offer?roomId=${c}`);if(s.ok){const m=await s.json();if(m.desc){clearInterval(l.current),l.current=null;const R=D();f.current=R,await R.setRemoteDescription(m.desc);const j=await R.createAnswer();await R.setLocalDescription(j),await V(j),k()}}else s.status===404?e>10&&(clearInterval(l.current),n=5e3,l.current=setInterval(h,n)):(u.error("Unexpected error polling for offers:",s.status),clearInterval(l.current),l.current=null,y.current&&(d(`Server error: ${s.status}`),t("failed")))}catch(s){u.error("Error polling for offers:",s),clearInterval(l.current),l.current=null,y.current&&(d(`Network error: ${s.message}`),t("failed"))}};l.current=setInterval(h,n)},[c,V,D,k]),U=o.useCallback(async()=>{i.current&&clearInterval(i.current);let e=0,n=1e3;const E=60,h=async()=>{try{if(e++,e>E){clearInterval(i.current),i.current=null,y.current&&(d("Connection timeout: No answer received from viewer. Make sure the viewer has connected."),t("failed"));return}const s=await fetch(`/api/answer?roomId=${c}`);if(s.ok){const m=await s.json();if(m.desc){clearInterval(i.current),i.current=null;const R=f.current;R&&await R.setRemoteDescription(m.desc)}}else s.status===404?e>10&&(clearInterval(i.current),n=5e3,i.current=setInterval(h,n)):(u.error("Unexpected error polling for answers:",s.status),clearInterval(i.current),i.current=null,y.current&&(d(`Server error: ${s.status}`),t("failed")))}catch(s){u.error("Error polling for answers:",s),clearInterval(i.current),i.current=null,y.current&&(d(`Network error: ${s.message}`),t("failed"))}};i.current=setInterval(h,n)},[c]),k=o.useCallback(async()=>{g.current&&clearInterval(g.current);const n=Q(async()=>{const E=await fetch(`/api/candidate?roomId=${c}&role=${r}${v?`&viewerId=${v}`:""}`);if(E.ok){const h=await E.json();if(h.candidates&&h.candidates.length>0){const s=f.current;if(s)for(const m of h.candidates)try{await s.addIceCandidate(m)}catch(R){u.warn("Failed to add ICE candidate:",R)}return!0}}else if(E.status!==404)throw u.error("Error polling for ICE candidates:",E.status),new Error(`HTTP ${E.status}`);return!1},{initialInterval:1e3,maxInterval:1e4,backoffFactor:1.5,maxPolls:120,backoffAfter:10});try{await n()}catch{u.warn("ICE candidate polling timeout - connection may be stuck")}},[c,r,v]),W=o.useCallback(async()=>{if(r!=="host")throw new Error("Only hosts can start screen sharing");try{d(null),t("connecting");const e=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0}),n=e.getVideoTracks(),E=e.getAudioTracks();if(n.length===0)throw new Error("Video permission denied - cannot share screen without video");E.length===0&&u.warn("Audio permission denied - screen sharing will be video-only"),C(e);const h=D();f.current=h,e.getTracks().forEach(m=>{h.addTransceiver(m,{streams:[e],direction:"sendonly"})});const s=await h.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return await h.setLocalDescription(s),await $(s),U(),k(),e}catch(e){throw u.error("Error starting screen share:",e),d(`Failed to start screen sharing: ${e.message}`),t("disconnected"),e}},[r,D,$,U,k]),M=o.useCallback(async()=>{if(r!=="viewer")throw new Error("Only viewers can connect to host");try{d(null),t("connecting"),x()}catch(e){throw u.error("Error connecting to host:",e),d(`Failed to connect to host: ${e.message}`),t("disconnected"),e}},[r,x]),P=o.useCallback(async()=>{try{p&&(p.getTracks().forEach(e=>e.stop()),C(null)),f.current&&(f.current.close(),f.current=null),l.current&&(clearInterval(l.current),l.current=null),i.current&&(clearInterval(i.current),i.current=null),g.current&&(clearInterval(g.current),g.current=null),t("disconnected"),w(null)}catch(e){u.error("Error stopping screen share:",e),d(`Failed to stop screen sharing: ${e.message}`)}},[p]),B=o.useCallback(async()=>{await P()},[P]);return o.useEffect(()=>()=>{y.current=!1,l.current&&clearInterval(l.current),i.current&&clearInterval(i.current),g.current&&clearInterval(g.current),f.current&&f.current.close(),p&&p.getTracks().forEach(e=>e.stop())},[p]),{connectionState:S,remoteStream:T,localStream:p,error:I,startScreenShare:W,stopScreenShare:P,connectToHost:M,disconnect:B}}export{re as A,Z as C,ee as E,ne as S,te as U,K as V,ae as u};
//# sourceMappingURL=useWebRTC-DAVvcFIA.js.map
