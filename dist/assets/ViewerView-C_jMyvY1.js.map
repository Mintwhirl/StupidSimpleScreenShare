{"version":3,"file":"ViewerView-C_jMyvY1.js","sources":["../../src/components/ViewerView.jsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport VideoPlayer from './VideoPlayer';\r\nimport { useWebRTC } from '../hooks/useWebRTC';\r\n\r\nfunction ViewerView({ roomId, viewerId, setViewerId, config, onGoHome }) {\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [hostStatus, setHostStatus] = useState('unknown');\r\n\r\n  const remoteVideoRef = useRef(null);\r\n  const {\r\n    connectToHost,\r\n    disconnect,\r\n    connectionState,\r\n    remoteStream,\r\n    error: webrtcError,\r\n  } = useWebRTC(roomId, 'viewer', config, viewerId);\r\n\r\n  // Update connection status based on WebRTC state\r\n  useEffect(() => {\r\n    setConnectionStatus(connectionState);\r\n    setIsConnected(connectionState === 'connected');\r\n  }, [connectionState]);\r\n\r\n  // Handle remote stream\r\n  useEffect(() => {\r\n    if (remoteStream && remoteVideoRef.current) {\r\n      remoteVideoRef.current.srcObject = remoteStream;\r\n    }\r\n  }, [remoteStream]);\r\n\r\n  // Handle WebRTC errors\r\n  useEffect(() => {\r\n    if (webrtcError) {\r\n      setError(webrtcError);\r\n      setIsConnecting(false);\r\n    }\r\n  }, [webrtcError]);\r\n\r\n  // Handle connection to host\r\n  const handleConnect = useCallback(async () => {\r\n    if (!roomId.trim()) {\r\n      setError('Please enter a room ID');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setError(null);\r\n      setIsConnecting(true);\r\n      setHostStatus('connecting');\r\n\r\n      await connectToHost();\r\n      setHostStatus('connected');\r\n    } catch (err) {\r\n      console.error('Error connecting to host:', err);\r\n      setError('Failed to connect to host. Please check the room ID and try again.');\r\n      setHostStatus('disconnected');\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  }, [roomId, connectToHost]);\r\n\r\n  // Auto-connect when component mounts\r\n  useEffect(() => {\r\n    if (roomId && !isConnecting && !isConnected) {\r\n      handleConnect();\r\n    }\r\n  }, [roomId, handleConnect, isConnected, isConnecting]);\r\n\r\n  // Handle disconnection\r\n  const handleDisconnect = async () => {\r\n    try {\r\n      await disconnect();\r\n      setHostStatus('disconnected');\r\n      if (remoteVideoRef.current) {\r\n        remoteVideoRef.current.srcObject = null;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error disconnecting:', err);\r\n    }\r\n  };\r\n\r\n  // Handle reconnection\r\n  const handleReconnect = () => {\r\n    handleDisconnect().then(() => {\r\n      setTimeout(handleConnect, 1000);\r\n    });\r\n  };\r\n\r\n  // Generate viewer ID if not provided\r\n  const generateViewerId = () => {\r\n    const id = `viewer_${Math.random().toString(36).substring(2, 8)}`;\r\n    setViewerId(id);\r\n    return id;\r\n  };\r\n\r\n  // Get connection status color\r\n  const getStatusColor = () => {\r\n    switch (connectionStatus) {\r\n      case 'connected':\r\n        return 'text-green-600';\r\n      case 'connecting':\r\n        return 'text-yellow-600';\r\n      case 'disconnected':\r\n        return 'text-red-600';\r\n      default:\r\n        return 'text-gray-600';\r\n    }\r\n  };\r\n\r\n  // Get connection status text\r\n  const getStatusText = () => {\r\n    switch (connectionStatus) {\r\n      case 'connected':\r\n        return 'Connected';\r\n      case 'connecting':\r\n        return 'Connecting...';\r\n      case 'disconnected':\r\n        return 'Disconnected';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  };\r\n\r\n  // Get host status color\r\n  const getHostStatusColor = () => {\r\n    switch (hostStatus) {\r\n      case 'connected':\r\n        return 'text-green-600';\r\n      case 'connecting':\r\n        return 'text-yellow-600';\r\n      case 'disconnected':\r\n        return 'text-red-600';\r\n      default:\r\n        return 'text-gray-600';\r\n    }\r\n  };\r\n\r\n  // Get host status text\r\n  const getHostStatusText = () => {\r\n    switch (hostStatus) {\r\n      case 'connected':\r\n        return 'Host Online';\r\n      case 'connecting':\r\n        return 'Connecting to Host...';\r\n      case 'disconnected':\r\n        return 'Host Offline';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='space-y-6'>\r\n      {/* Header */}\r\n      <div className='bg-white rounded-lg shadow-md p-6'>\r\n        <div className='flex items-center justify-between'>\r\n          <div>\r\n            <h2 className='text-2xl font-bold text-gray-900 mb-2'>üëÄ Viewing Room</h2>\r\n            <p className='text-gray-600'>\r\n              Connected to room: <span className='font-mono font-medium'>{roomId}</span>\r\n            </p>\r\n          </div>\r\n          <div className='text-right'>\r\n            <div className={`text-sm font-medium ${getStatusColor()}`}>Connection: {getStatusText()}</div>\r\n            <div className={`text-sm font-medium ${getHostStatusColor()}`}>{getHostStatusText()}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Viewer ID Section */}\r\n      <div className='bg-white rounded-lg shadow-md p-6'>\r\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Your Viewer ID</h3>\r\n        <div className='flex items-center space-x-4'>\r\n          <div className='flex-1'>\r\n            <input\r\n              type='text'\r\n              value={viewerId || ''}\r\n              onChange={(e) => setViewerId(e.target.value)}\r\n              placeholder='Enter your name or leave blank for auto-generated ID'\r\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'\r\n            />\r\n          </div>\r\n          <button\r\n            onClick={generateViewerId}\r\n            className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\r\n          >\r\n            Generate ID\r\n          </button>\r\n        </div>\r\n        <p className='text-sm text-gray-500 mt-2'>This ID helps identify you in the chat and diagnostics.</p>\r\n      </div>\r\n\r\n      {/* Connection Controls */}\r\n      <div className='bg-white rounded-lg shadow-md p-6'>\r\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Connection Controls</h3>\r\n        <div className='flex items-center justify-center space-x-4'>\r\n          {!isConnected ? (\r\n            <button\r\n              onClick={handleConnect}\r\n              disabled={isConnecting}\r\n              className={`px-6 py-3 rounded-lg font-medium transition-colors ${\r\n                isConnecting\r\n                  ? 'bg-gray-400 text-white cursor-not-allowed'\r\n                  : 'bg-green-600 text-white hover:bg-green-700'\r\n              }`}\r\n            >\r\n              {isConnecting ? 'Connecting...' : 'Connect to Host'}\r\n            </button>\r\n          ) : (\r\n            <div className='flex items-center space-x-4'>\r\n              <button\r\n                onClick={handleReconnect}\r\n                className='px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors'\r\n              >\r\n                Reconnect\r\n              </button>\r\n              <button\r\n                onClick={handleDisconnect}\r\n                className='px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors'\r\n              >\r\n                Disconnect\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {isConnected && (\r\n          <div className='mt-4 text-center'>\r\n            <div className='flex items-center justify-center space-x-2 text-green-600'>\r\n              <div className='w-2 h-2 bg-green-600 rounded-full animate-pulse'></div>\r\n              <span className='text-sm font-medium'>Connected to Host</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <div className='bg-red-50 border border-red-200 rounded-lg p-4'>\r\n          <div className='flex items-center'>\r\n            <div className='text-red-600 mr-2'>‚ö†Ô∏è</div>\r\n            <div>\r\n              <h4 className='text-red-800 font-medium'>Connection Error</h4>\r\n              <p className='text-red-700 text-sm mt-1'>{error}</p>\r\n            </div>\r\n          </div>\r\n          <div className='mt-3'>\r\n            <button\r\n              onClick={handleReconnect}\r\n              className='text-sm bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 transition-colors'\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Remote Video Display */}\r\n      {isConnected && (\r\n        <div className='bg-white rounded-lg shadow-md p-6'>\r\n          <h3 className='text-lg font-semibold text-gray-900 mb-4'>Host's Screen</h3>\r\n          <div className='relative'>\r\n            <VideoPlayer\r\n              ref={remoteVideoRef}\r\n              className='w-full max-w-4xl mx-auto rounded-lg border border-gray-200 bg-black'\r\n              autoPlay\r\n              playsInline\r\n            />\r\n            {!remoteStream && (\r\n              <div className='absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                <div className='text-center'>\r\n                  <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'></div>\r\n                  <p className='text-gray-600'>Waiting for host to start sharing...</p>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {remoteStream && (\r\n              <div className='absolute top-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs'>\r\n                Live\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Waiting State */}\r\n      {!isConnected && !isConnecting && (\r\n        <div className='bg-white rounded-lg shadow-md p-6'>\r\n          <div className='text-center py-12'>\r\n            <div className='text-6xl mb-4'>üì∫</div>\r\n            <h3 className='text-xl font-semibold text-gray-900 mb-2'>Ready to View</h3>\r\n            <p className='text-gray-600 mb-6'>Click \"Connect to Host\" to start viewing the shared screen.</p>\r\n            <button\r\n              onClick={handleConnect}\r\n              className='px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\r\n            >\r\n              Connect to Host\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Instructions */}\r\n      <div className='bg-blue-50 border border-blue-200 rounded-lg p-6'>\r\n        <h3 className='text-lg font-semibold text-blue-900 mb-4'>üìã Instructions</h3>\r\n        <div className='space-y-2 text-sm text-blue-800'>\r\n          <p>‚Ä¢ Make sure the host has started sharing their screen</p>\r\n          <p>‚Ä¢ Click \"Connect to Host\" to join the viewing session</p>\r\n          <p>‚Ä¢ Use the Chat feature to communicate with the host</p>\r\n          <p>‚Ä¢ The screen will appear automatically when the host starts sharing</p>\r\n          <p>‚Ä¢ Click \"Disconnect\" when you're done viewing</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Actions */}\r\n      <div className='flex justify-center space-x-4'>\r\n        <button\r\n          onClick={onGoHome}\r\n          className='px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors'\r\n        >\r\n          Back to Home\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewerView;\r\n"],"names":["ViewerView","roomId","viewerId","setViewerId","config","onGoHome","connectionStatus","setConnectionStatus","useState","isConnected","setIsConnected","error","setError","isConnecting","setIsConnecting","hostStatus","setHostStatus","remoteVideoRef","useRef","connectToHost","disconnect","connectionState","remoteStream","webrtcError","useWebRTC","useEffect","handleConnect","useCallback","err","handleDisconnect","handleReconnect","generateViewerId","id","getStatusColor","getStatusText","getHostStatusColor","getHostStatusText","jsxs","jsx","e","VideoPlayer"],"mappings":"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"}