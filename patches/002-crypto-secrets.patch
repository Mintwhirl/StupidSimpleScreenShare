From: Claude Code <noreply@anthropic.com>
Date: Thu, 16 Oct 2025 01:45:00 +0000
Subject: [PATCH] security: use crypto.randomBytes for sender secrets

Replace Math.random() with crypto.randomBytes(16) for cryptographically
secure secret generation. Increases entropy from ~52 bits to 128 bits
and prevents brute-force/prediction attacks.

---
 api/register-sender.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/api/register-sender.js b/api/register-sender.js
index abc1234..def5678 100644
--- a/api/register-sender.js
+++ b/api/register-sender.js
@@ -1,3 +1,4 @@
+import { randomBytes } from 'crypto';
 import { createCompleteHandler } from './_middleware.js';
 import { sendError, validateRoomId, validateSender, getClientIdentifier, TTL_ROOM } from './_utils.js';

@@ -34,7 +35,7 @@ async function handleRegisterSender(req, res, { redis }) {
     const senderKey = `room:${roomId}:sender:${senderId.trim()}`;

     // Generate a unique secret for this sender
-    const senderSecret = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
+    const senderSecret = randomBytes(16).toString('hex'); // 32 hex chars (128 bits)

     // Store both client ID and secret
     const senderData = {
--
2.51.0
